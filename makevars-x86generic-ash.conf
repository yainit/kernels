###########
##### ! /bin /bash
# This is the result of my personal experiences with pentium3, athlon-xp, prescott,
# nocona, athlon64-X2, atom and Zambezi AMD-FX6300 - processors which I own or owned, together
# with hints from gcc-manual and manufacturers' literature and the sandpiler in the internet www.sandpile.org
#
#  These settings are specially for the generic use of common available and marketed processors
#  within the x86-Architecture from i486-mmx on
#
#  With the generation of instruction sets , the processor architecture families
#  are trespassed and one optimized way to all processors is kept through.
#  The aim is to have a software with the possibility to communicate
#  within the x86 PC supported world
#  (c) Dieter Miosga , 2008-2014-08-01   gcc-4.9.1 , binutils-2.24-gnu, binutils-2.24.52.0.3

 OPTEXT=""
 FLAGS=""
 GENFLAG=""
 ARCHFLAG=""
 PROCFLAG=""
 EXTENT=""

#declare -a CFLAG
#declare -a GENFLAGS
#declare -a ARCHFLAGS
#declare -a ARCHPROC
#declare -a OPTIMIZE
#declare -a EXTENSION
CFLAG=""
GENFLAGS=""
ARCHFLAGS=""
ARCHPROC=""
OPTIMIZE=""
EXTENSION=""

OPTIMIZE_0x86="-O2"
OPTIMIZE_0x86Os="-Os"
OPTIMIZE_2mx="-Os"
OPTIMIZE_2mxtsc="-O2"
OPTIMIZE_686mmx="-Os"
OPTIMIZE_2se1="-O2"
OPTIMIZE_2se2="-O2"
OPTIMIZE_2se3="-O2"
OPTIMIZE_n2se3="-O2"
OPTIMIZE_p2se3="-O2"
OPTIMIZE_3se3="-O2"
OPTIMIZE_c3se3="-O2"
OPTIMIZE_3se42="-O2"
OPTIMIZE_2se4a="-O2"
OPTIMIZE_1init="-Os"
OPTIMIZE_1soft="-O2"
OPTIMIZE_dbgx86="-Og"
OPTIMIZE_navx="-O2"
OPTIMIZE_avx="-O2"
OPTIMIZE_avx2="-O2"
OPTIMIZE_atom="-O2"
OPTIMIZE_pptu686="-O2"
OPTIMIZE_3se3suse="-O2"
OPTIMIZE_2se3suse="-O2"
OPTIMIZE_2se4asuse="-O2"
OPTIMIZE_k15bd123="-O2"
OPTIMIZE_k14bt1="-O2"
OPTIMIZE_k16bt2="-O2"
OPTIMIZE_gen64="-O2"

#
#
EXTENSIONS="1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29"
EXTENTS="0x86 0x86Os 2mx 2mxtsc 686mmx 2se1 2se2 2se3 n2se3 p2se3 3se3 c3se3 3se42 2se4a 1init 1soft dbgx86 navx avx avx2 atom pptu686 3se3suse 2se3suse 2se4asuse k15bd123  k14bt1 k16bt2 gen64"
#
WARNFLAGS=" -Wall -Wextra -Wno-unused -Wno-unused-parameter -Wno-uninitialized -Wno-missing-field-initializers -Wno-strict-aliasing -Wno-conversion -Wno-system-headers -Wno-empty-body -Wstrict-prototypes -Wdisabled-optimization -Wa,-msse-check=warning -Wunsafe-loop-optimizations "
#
# obsoleted
# -fgcse-sm -fgcse-las
COMMONFLAGS="  -fomit-frame-pointer -momit-leaf-frame-pointer  -fno-exceptions -fno-math-errno -fno-trapping-math -fno-delete-null-pointer-checks -fno-var-tracking-assignments -fno-tracer -ffreestanding  --param max-inline-insns-single=131072 --param inline-unit-growth=350  "
#-f(no-)jump-tables and -f(no-)stack-rotector is controlled by kernel since 3.14
# we distinguish 9 essential processor architecture changes and fundamentals
#  winchip2/mmx , i686/sse1 , i686/sse2 , prescott/sse3 , core/ssse3 , core2/sse4.x , phenom/sse4a, bulldozer-core2-i7-avx/sse4.x-avx-aes

#         i386 is not respected!
#   fpu:  486 pentium pentium-overdrive
CFLAG_0x86=" $WARNFLAGS  -g0 ${OPTIMIZE_0x86}   -mhard-float -march=i486 -mtune=generic  -mfancy-math-387 -mpreferred-stack-boundary=2 $COMMONFLAGS "
GENFLAGS_0x86=" -fmerge-all-constants"
ARCHFLAGS_0x86=" -ffast-math "
ARCHPROC_0x86=" -march=i486 -mtune=generic -g0 -mpreferred-stack-boundary=2 -fno-stack-protector  -fno-strict-aliasing "
EXTENSION_0x86="0x86"

# fpu: 486 pentium pentium-overdrive  - optimized for code size
CFLAG_0x86Os="  $WARNFLAGS -g0  ${OPTIMIZE_0x86Os}  -mhard-float  -march=i486 -mtune=generic -mpreferred-stack-boundary=2 -mfancy-math-387 -mfpmath=387  $COMMONFLAGS "
GENFLAGS_0x86Os="-fmerge-all-constants"
ARCHFLAGS_0x86Os=" -ffast-math "
ARCHPROC_0x86Os=" -march=i486 -mtune=generic -g0 -mpreferred-stack-boundary=2 -fno-stack-protector  -fno-strict-aliasing "
EXTENSION_0x86Os="0x86Os"

# mmx:  wch2-mmx pentium-mmx athlon-mmx duron-mmx pentiumpro - optimized for speed
CFLAG_2mx=" $WARNFLAGS -g0 ${OPTIMIZE_2mx} -fpeel-loops   -mhard-float -march=winchip2 -mtune=generic  -mmmx -mno-3dnow -funsafe-loop-optimizations -fexpensive-optimizations -ffast-math  -mpreferred-stack-boundary=2 $COMMONFLAGS "
GENFLAGS_2mx=" -fmerge-all-constants "
ARCHFLAGS_2mx=" -mno-sse  -mfpmath=387 -mno-3dnow   "
ARCHPROC_2mx=" -march=winchip2  -mtune=generic -g0 -mpreferred-stack-boundary=2 -fno-stack-protector  -fno-strict-aliasing "
EXTENSION_2mx="2mx"

# mmx:  pentium-mmx athlon duron pentiumpro - optimized for code size
CFLAG_2mxtsc=" $WARNFLAGS -g0 ${OPTIMIZE_2mxtsc}   -mhard-float   -march=i586  -mtune=generic  -mmmx -mno-3dnow  -ffast-math -fpeel-loops -fgcse-las -fgcse-sm -fexpensive-optimizations -funsafe-loop-optimizations -mpreferred-stack-boundary=2   $COMMONFLAGS "
GENFLAGS_2mxtsc="-fmerge-all-constants"
ARCHFLAGS_2mxtsc=" -mmmx -mno-sse -mno-sse2 -mno-sse3 -mno-3dnow -mno-sse4 -mno-ssse3  "
ARCHPROC_2mxtsc=" -march=i586 -mtune=generic -g0 -mpreferred-stack-boundary=2 -fno-stack-protector  -fno-strict-aliasing "
EXTENSION_2mxtsc="2mxtsc"

# 686mmx:  athlon duron pentiumpro and higher - optimized for code size
CFLAG_686mmx=" $WARNFLAGS -g0 ${OPTIMIZE_686mmx}   -mhard-float   -march=i686  -mtune=generic  -mmmx -mno-3dnow -mno-sse -ffast-math -mfpmath=387 -fgcse-las -fgcse-sm -fexpensive-optimizations -funsafe-loop-optimizations -mpreferred-stack-boundary=2   $COMMONFLAGS "
GENFLAGS_686mmx="-fmerge-all-constants"
ARCHFLAGS_686mmx=" -mmmx -mno-sse -mno-sse2 -mno-sse3 -mno-3dnow -mno-sse4 -mno-sse4a -mno-avx -mno-ssse3 -ffast-math -mfpmath=387 "
ARCHPROC_686mmx=" -march=i686 -mtune=generic -g0 -mpreferred-stack-boundary=2 -fno-stack-protector  -fno-strict-aliasing "
EXTENSION_686mmx="686mmx"

# sse:  pentium3 athlon-xp sempron coppermine tualatin barton - optimized for speed over sse1
CFLAG_2se1=" $WARNFLAGS -g0 ${OPTIMIZE_2se1} -fpeel-loops  -mhard-float    -march=i686    -mtune=generic  -mmmx -mno-3dnow  -ffast-math -fpeel-loops -fgcse-las -fgcse-sm -fexpensive-optimizations -funsafe-loop-optimizations -mpreferred-stack-boundary=3 $COMMONFLAGS "
GENFLAGS_2se1=" -fmerge-all-constants "
ARCHFLAGS_2se1=" -msse  -mno-sse2 -mno-sse3 -mno-3dnow -mno-sse4 -mno-ssse3  -mfpmath=387 "
ARCHPROC_2se1=" -march=i686  -mtune=generic -g0 -mmmx -mno-3dnow -mpreferred-stack-boundary=3 -fno-stack-protector  -fno-strict-aliasing"
EXTENSION_2se1="2se1"

# sse2: pentium4, pentium-m, athlon-xp, sempron - optimized for speed over sse2
#       no explicit EM64T/x86-64 support however such programs will run if machine supports
CFLAG_2se2=" $WARNFLAGS -g0  ${OPTIMIZE_2se2} -fpeel-loops -fgcse-las -fgcse-sm -fexpensive-optimizations -funsafe-loop-optimizations -mhard-float -march=i686  -mtune=generic  -mmmx -mno-3dnow  -ffast-math -mfpmath=387  -mpreferred-stack-boundary=3  $COMMONFLAGS "
GENFLAGS_2se2="  -fmerge-all-constants"
ARCHFLAGS_2se2=" -msse -msse2  -m96bit-long-double -mno-sse3 -mno-3dnow -mno-sse4 -mno-ssse3 -mfpmath=sse "
ARCHPROC_2se2=" -march=i686  -mtune=generic -g0 -mmmx -mno-3dnow -mpreferred-stack-boundary=3 -fno-stack-protector  -fno-strict-aliasing "
EXTENSION_2se2="2se2"

# sse3:  generic support for precott athlon64 athlon-fx nocona athlon-X2 opteron (k8-sse3 family)
#        no explicit EM64T/x86-64 support - optimized for speed over sse3
CFLAG_2se3=" $WARNFLAGS ${OPTIMIZE_2se3} -Wa,-mtune=generic32  -g0  -mhard-float -march=i686  -mtune=prescott  -mmmx -mno-3dnow  -mno-movbe -ffast-math  -mfpmath=387  -fpeel-loops -fgcse-las -fgcse-sm -funsafe-loop-optimizations -mpreferred-stack-boundary=4 $COMMONFLAGS "
GENFLAGS_2se3=" -fmerge-all-constants"
ARCHFLAGS_2se3=" -msse -msse2 -msse3 -m128bit-long-double -mno-3dnow -mno-sse4 -mno-ssse3 "
ARCHPROC_2se3=" -march=i686 -mtune=generic -g0 -mpreferred-stack-boundary=4  -fno-strict-aliasing "
EXTENSION_2se3="2se3"

# sse3:  precott athlon64 athlon-fx athlon-II opteron (k8-sse3 family)
#        no explicit EM64T/x86-64 support - optimized for speed over sse3
CFLAG_p2se3=" $WARNFLAGS ${OPTIMIZE_p2se3}  -g0  -mhard-float -march=prescott   -mtune=prescott  -mmmx -mno-3dnow  -mno-movbe -ffast-math  -mfpmath=387  -fpeel-loops -fgcse-las -fgcse-sm -funsafe-loop-optimizations -mpreferred-stack-boundary=4 $COMMONFLAGS "
GENFLAGS_p2se3=" -fmerge-all-constants"
ARCHFLAGS_p2se3=" -msse -msse2 -msse3 -mfpmath=sse  -m128bit-long-double -mno-3dnow -mno-sse4 -mno-ssse3 -mfpmath=sse  "
ARCHPROC_p2se3=" -march=prescott -mtune=generic -g0 -mpreferred-stack-boundary=4  -fno-strict-aliasing "
EXTENSION_p2se3="p2se3"


# sse3:  nocona athlon64 athlon-fx athlon-II opteron (k8-sse3 family)
#        no explicit EM64T/x86-64 support - optimized for speed over sse3
CFLAG_n2se3=" $WARNFLAGS ${OPTIMIZE_n2se3}  -g0  -mhard-float -march=nocona  -mtune=prescott  -mmmx -mno-3dnow  -mno-movbe -ffast-math  -mfpmath=387  -fpeel-loops -fgcse-las -fgcse-sm -funsafe-loop-optimizations -mpreferred-stack-boundary=4 $COMMONFLAGS "
GENFLAGS_n2se3=" -fmerge-all-constants"
ARCHFLAGS_n2se3=" -msse -msse2 -mfpmath=sse -msse3 -m128bit-long-double -mno-3dnow -mno-sse4 -mno-ssse3  "
ARCHPROC_n2se3=" -march=nocona -mtune=generic -g0 -mpreferred-stack-boundary=4  -fno-strict-aliasing "
EXTENSION_n2se3="n2se3"

#         AMD K9-10/Opteron has no ssse3
# ssse3 : EM64T - optimized for speed over ssse3 for core2/EM64T, covers: penryn atom
CFLAG_3se3=" $WARNFLAGS -Wa,-mtune=generic32 -g0 ${OPTIMIZE_3se3}  -mhard-float -march=i686  -mtune=core2  -mmmx -mno-3dnow -ffast-math -mfpmath=387  -mno-movbe -fpeel-loops -fgcse-las -fgcse-sm -funsafe-loop-optimizations -mpreferred-stack-boundary=4  $COMMONFLAGS "
GENFLAGS_3se3=" -fmerge-all-constants "
ARCHFLAGS_3se3=" -msse -msse2 -msse3 -mssse3 -m128bit-long-double -mno-sse4 -mno-sse4a -mno-3dnow  "
ARCHPROC_3se3=" -march=i686  -mtune=generic -mno-movbe -g0  -mpreferred-stack-boundary=4  -fno-stack-protector -fno-strict-aliasing "
EXTENSION_3se3="3se3"

#         AMD K9-10/Opteron has no ssse3
# ssse3 : EM64T - optimized for speed over ssse3 for core2/EM64T, covers: penryn atom
CFLAG_c3se3=" $WARNFLAGS  -g0 ${OPTIMIZE_c3se3}  -mhard-float -march=core2  -mtune=pentium-m  -mmmx -mno-3dnow -ffast-math -mfpmath=387  -mno-movbe -fpeel-loops -fgcse-las -fgcse-sm -funsafe-loop-optimizations -mpreferred-stack-boundary=4  $COMMONFLAGS "
GENFLAGS_c3se3=" -fmerge-all-constants "
ARCHFLAGS_c3se3=" -msse -msse2 -msse3 -mssse3 -m128bit-long-double -mno-sse4 -mno-sse4a -mno-3dnow  "
ARCHPROC_c3se3=" -march=core2 -mtune=generic -mno-movbe -g0  -mpreferred-stack-boundary=4  -fno-stack-protector -fno-strict-aliasing "
EXTENSION_c3se3="3se3"

# sse4.1/sse4.2: Intel core i3 i5 i7 with SSE4.1 and SSE4.2 Nehalem / AMD k14,k15,k16 with sse4,ssse3
#       optimized for speed over sse4.x with EM64T/x86-64
CFLAG_3se42=" $WARNFLAGS  -g0 ${OPTIMIZE_3se42}  -mhard-float -march=i686  -mtune=nehalem -no-popcnt   -mmmx -mno-3dnow  -ffast-math  -mfpmath=387 -fpeel-loops -fgcse-las -fgcse-sm -fexpensive-optimizations -funsafe-loop-optimizations -mpreferred-stack-boundary=4 $COMMONFLAGS "
GENFLAGS_3se42=" -fmerge-all-constants "
ARCHFLAGS_3se42="  -msse -msse2 -msse3 -mssse3 -msse4 -m128bit-long-double -mno-3dnow -mno-sse4a -mfpmath=387,sse "
ARCHPROC_3se42="  -march=i686  -mtune=generic -g0 -mmmx -mpreferred-stack-boundary=4 -fno-stack-protector -fno-strict-aliasing "
EXTENSION_3se42="3se42"

# sse4a: AMD family 10 processors: Phenom-Xi/Barcelona/AthlonII-Xi  with sse4a
#       optimized for speed over sse4.x 3dnowext with EM64T/x86-64
CFLAG_2se4a=" $WARNFLAGS -g0 ${OPTIMIZE_2se4a} -fpeel-loops -fgcse-las -fgcse-sm -fexpensive-optimizations -funsafe-loop-optimizations -mhard-float -march=amdfam10 -mtune=amdfam10  -mmmx -m3dnow  -ffast-math -mfpmath=387  -mpreferred-stack-boundary=4 $COMMONFLAGS"
GENFLAGS_2se4a=" -fmerge-all-constants"
ARCHFLAGS_2se4a=" -mfpmath=sse -mcx16 -msahf -msse -msse2 -msse3 -msse4a -m128bit-long-double  -mno-ssse3 -mno-sse4.1 -mno-sse4.2 "
ARCHPROC_2se4a=" -march=amdfam10 -mtune=generic -g0 -mhard-float -ffast-math  -mpreferred-stack-boundary=4 -fno-stack-protector  -fno-strict-aliasing"
EXTENSION_2se4a="2se4a"


CFLAG_1init=" $WARNFLAGS  ${OPTIMIZE_1init} -g0 -mhard-float   -march=winchip2 -mtune=generic  -mmmx -mno-3dnow -ffast-math  -mpreferred-stack-boundary=2 $COMMONFLAGS"
GENFLAGS_1init=" -fmerge-all-constants"
ARCHFLAGS_1init=" -mmmx -mno-sse -mno-sse2 -mno-sse3  -mno-sse4a  -mno-ssse3 -mno-sse4.1 -mno-sse4.2  -mfpmath=387"
ARCHPROC_1init=" -march=winchip2  -mtune=generic -mhard-float -ffast-math -g0 -mpreferred-stack-boundary=2   -fno-strict-aliasing"
EXTENSION_1init="1init"

CFLAG_1soft=" $WARNFLAGS  ${OPTIMIZE_1soft} -g0  -march=winchip2 -mtune=generic -msoft-float -ffast-math -mmmx -mno-3dnow -ffreestanding -fno-delete-null-pointer-checks -funsave-loop-optimizations   --param max-inline-insns-single=131072 --param inline-unit-growth=350   "
GENFLAGS_1soft=" -fmerge-all-constants"
ARCHFLAGS_1soft=" -mmmx -mno-sse -mno-sse2 -mno-sse3 -mno-sse4a  -mno-ssse3 -mno-sse4.1 -mno-sse4.2"
ARCHPROC_1soft=" -march=winchip2  -mtune=generic -g0 -fno-strict-aliasing"
EXTENSION_1soft="1soft"

CFLAG_dbgx86=" $WARNFLAGS  ${OPTIMIZE_dbgx86} -g  -mtune=generic -mhard-float -ffast-math  -mno-mmx -mno-3dnow -mno-sse -ffreestanding  -fno-delete-null-pointer-checks   --param max-inline-insns-single=131072 --param inline-unit-growth=350   "
GENFLAGS_dbgx86=""
ARCHFLAGS_dbgx86=""
ARCHPROC_dbgx86=" -mtune=generic"
EXTENSION_dbgx86="dbgx86"

#
# avx, sse4.1/sse4.2: Intel corei7-avx with AVX1 , SSE4.1 and SSE4.2
#       optimized for speed over sse4.x with EM64T/x86-64
CFLAG_avx=" $WARNFLAGS -g0 ${OPTIMIZE_avx}   -fomit-frame-pointer -momit-leaf-frame-pointer -march=i686  -mtune=sandybridge -mno-fma -mno-fma4 -mno-movbe -mno-bmi -mno-xop -mno-lwp -mno-abm -mno-f16c -mhard-float -ffast-math   -fgcse-las -fgcse-sm -funsafe-loop-optimizations -mmmx -mno-3dnow -mssse3  -msse4 -mpclmul -maes  -mno-sse4a  -msahf -mcx16 -m128bit-long-double -fno-short-double  -mfpmath=sse -msse2avx -mvzeroupper -mprefer-avx128 -mavx  -mno-avx2 -mpreferred-stack-boundary=4 $COMMONFLAGS "
#  -mcx16 -msahf -mno-movbe -maes -mpclmul -mpopcnt -mabm -mlwp -mno-fma -mfma4 -mxop
GENFLAGS_avx=" -fmerge-all-constants "
ARCHFLAGS_avx=" -msse -msse2 -msse3 -mssse3 -msse4.2 -msse4.1 -mfpmath=sse  -msse2avx  -mavx "
ARCHPROC_avx=" -march=i686  -mtune=generic -mhard-float -ffast-math -g0 -mpreferred-stack-boundary=4 -fno-stack-protector -fno-strict-aliasing "
EXTENSION_avx="avx"

#
# avx, sse4.1/sse4.2: Intel corei7-avx with AVX1 , SSE4.1 and SSE4.2
#       optimized for speed over sse4.x with EM64T/x86-64
CFLAG_navx=" $WARNFLAGS -g0 ${OPTIMIZE_navx}   -fomit-frame-pointer -momit-leaf-frame-pointer -march=nocona -mtune=sandybridge -mno-fma -mno-fma4 -mno-movbe -mno-bmi -mno-xop -mno-lwp -mno-abm -mno-f16c -mhard-float -ffast-math   -fgcse-las -fgcse-sm -funsafe-loop-optimizations -mmmx -mno-3dnow -mssse3  -msse4 -mpclmul -maes  -mno-sse4a  -msahf -mcx16 -m128bit-long-double -fno-short-double  -mfpmath=sse -msse2avx -mvzeroupper -mprefer-avx128 -mavx  -mno-avx2 -mpreferred-stack-boundary=4 $COMMONFLAGS "
#  -mcx16 -msahf -mno-movbe -maes -mpclmul -mpopcnt -mabm -mlwp -mno-fma -mfma4 -mxop
GENFLAGS_navx=" -fmerge-all-constants "
ARCHFLAGS_navx=" -msse -msse2 -msse3 -mssse3 -msse4.2 -msse4.1 -mfpmath=sse  -msse2avx  -mavx "
ARCHPROC_navx=" -march=nocona -mtune=generic -mhard-float -ffast-math -g0 -mpreferred-stack-boundary=4 -fno-stack-protector -fno-strict-aliasing "
EXTENSION_navx="navx"

#
# avx, sse4.1/sse4.2: Intel corei7-avx with AVX1 , SSE4.1 and SSE4.2
#       optimized for speed over sse4.x with EM64T/x86-64
CFLAG_avx2=" $WARNFLAGS -g0 ${OPTIMIZE_avx2}   -fomit-frame-pointer -momit-leaf-frame-pointer -march=sandybridge -mtune=haswell -mhard-float -ffast-math -fpeel-loops -fgcse-las -fgcse-sm -fexpensive-optimizations -funsafe-loop-optimizations -mno-rdrnd -mno-movbe -mmmx -mno-3dnow -mssse3 -msse4 -mno-sse4a -mpclmul -maes -mfma -mbmi2 -mf16c -mfpmath=sse -msse2avx -mavx  -mavx2 -mpreferred-stack-boundary=4 $COMMONFLAGS "
#  -mcx16 -msahf -mno-movbe -maes -mpclmul -mpopcnt -mabm -mlwp -mno-fma -mfma4 -mxop
GENFLAGS_avx2=" -fmerge-all-constants "
ARCHFLAGS_avx2=" -msse -msse2 -msse3 -mssse3 -msse4.2 -msse4.1 -mfpmath=sse  -msse2avx  -mavx "
ARCHPROC_avx2=" -march=sandybridge  -mtune=generic -mhard-float -ffast-math -g0 -mpreferred-stack-boundary=4 -fno-stack-protector -fno-strict-aliasing "
EXTENSION_avx2="avx2"


# to run only on an ATOM Processor
CFLAG_atom=" $WARNFLAGS -g0 ${OPTIMIZE_atom} -mhard-float  -ffast-math  -march=atom  -mtune=atom -fpeel-loops -fgcse-las -fgcse-sm -fexpensive-optimizations -funsafe-loop-optimizations  -mfpmath=387 -mno-avx -mno-aes -mmmx -mmovbe  -mno-3dnow -mpreferred-stack-boundary=4 -mno-sse4.2 -mno-sse4.1 -mno-sse4a $COMMONFLAGS "
GENFLAGS_atom=" -fmerge-all-constants "
ARCHFLAGS_atom=" -mfpmath=387,sse  -msse -msse2 -msse3 -mssse3 -m128bit-long-double  -msseregparm "
ARCHPROC_atom=" -march=atom  -mtune=generic -mhard-float -ffast-math -g0 -mpreferred-stack-boundary=4 -fno-stack-protector -fno-strict-aliasing "
EXTENSION_atom="atom"


# 686 -pptu :  special puppy kernel config parms: prescott athlon64 athlon-fx nocona athlon-X2 opteron (k8-sse3 family)
#        no explicit EM64T/x86-64 support - optimized for speed over sse3
CFLAG_pptu686=" $WARNFLAGS ${OPTIMIZE_pptu686} -g0  -mhard-float -ffast-math -march=i686 -mtune=prescott -mmmx -mno-3dnow   -mfpmath=387 -mpreferred-stack-boundary=4 $COMMONFLAGS "
GENFLAGS_pptu686=" -fmerge-all-constants"
ARCHFLAGS_pptu686=" -msse -msse2 -msse3 -m128bit-long-double -mno-3dnow -mno-sse4 -mno-ssse3 -mfpmath=387 "
ARCHPROC_pptu686=" -march=i686 -mtune=generic -g0 -mpreferred-stack-boundary=4 -fno-stack-protector -fno-strict-aliasing "
EXTENSION_pptu686="pptu686"


#         AMD K9-10/Opteron has no ssse3
# ssse3 : EM64T - optimized for speed over ssse3 for core2/EM64T, covers: penryn atom
CFLAG_3se3suse=" $WARNFLAGS  -g0 ${OPTIMIZE_3se3suse}   -mhard-float -march=i686 -mtune=core2  -mmmx -mno-3dnow -mfancy-math-387  -mfpmath=387 -fexpensive-optimizations -fpeel-loops  -mpreferred-stack-boundary=4  $COMMONFLAGS  "
GENFLAGS_3se3suse=" -fmerge-all-constants "
ARCHFLAGS_3se3suse=" -msse -msse2 -msse3 -mssse3 -m128bit-long-double -mno-sse4 -mno-sse4a -mfpmath=387,sse "
ARCHPROC_3se3suse=" -march=i686   -mtune=generic -g0  -mpreferred-stack-boundary=4  -fno-stack-protector -fno-strict-aliasing"
#ARCHPROC_3se3=" -march=i686  -mtune=generic  -mpreferred-stack-boundary=4 -fno-stack-protector  -fno-strict-aliasing "
EXTENSION_3se3suse="3se3suse"

# sse3:  prescott athlon64 athlon-fx nocona athlon-X2 opteron (k8-sse3 family)
#        no explicit EM64T/x86-64 support - optimized for speed over sse3
CFLAG_2se3suse=" $WARNFLAGS ${OPTIMIZE_2se3suse} -g0  -mhard-float -ffast-math -march=i686 -mtune=prescott -mmmx -mno-3dnow   -mfpmath=387  -funsafe-loop-optimizations -fexpensive-optimizations -mpreferred-stack-boundary=4 $COMMONFLAGS "
GENFLAGS_2se3suse=" -fmerge-all-constants"
ARCHFLAGS_2se3suse=" -msse -msse2 -msse3 -m128bit-long-double -mno-3dnow -mno-sse4 -mno-ssse3 -mfpmath=387,sse  "
ARCHPROC_2se3suse=" -march=i686 -mtune=generic -g0 -mpreferred-stack-boundary=4 -fno-stack-protector -fno-strict-aliasing "
EXTENSION_2se3suse="2se3suse"

CFLAG_2se4asuse=" $WARNFLAGS ${OPTIMIZE_2se4asuse} -g0  -mhard-float -march=amdfam10 -mtune=amdfam10  -mmmx -m3dnow -ffast-math -funsave-loop-optimizations -fexpensive-optimizations -mfpmath=387 -mpreferred-stack-boundary=4 $COMMONFLAGS "
GENFLAGS_2se4asuse=" -fmerge-all-constants"
ARCHFLAGS_2se4asuse=" -mcx16 -msahf -msse -msse2 -msse3 -msse4a -m128bit-long-double -m3dnow -mno-sse4 -mno-ssse3 -mfpmath=387,sse  "
ARCHPROC_2se4asuse=" -march=amdfam10  -mtune=generic -g0 -mpreferred-stack-boundary=4 -fno-stack-protector -fno-strict-aliasing "
EXTENSION_2se4asuse="2se4asuse"

# generic AMD K15h processor family support Bulldozer/Zambezi/Piledriver
#  -mcx16 -msahf -mno-movbe -maes -mpclmul -mpopcnt -mabm -mlwp -mno-fma -mno-fma4 -mxop
CFLAG_k15bd123=" $WARNFLAGS ${OPTIMIZE_k15bd123} -g0  -mhard-float  -march=bdver1  -mtune=bdver1   -mmmx -m3dnow -ffast-math -mssse3 -msse4 -msse4a -mcx16 -msahf -mpclmul -mpopcnt -mabm -mlwp -mno-fma4 -mno-fma -mxop -mavx  -msse4.2 -msse4.1  -msse2avx  -fpeel-loops -fexpensive-optimizations -funsafe-loop-optimizations  -mpreferred-stack-boundary=4 $COMMONFLAGS "
GENFLAGS_k15bd123=" -fmerge-all-constants"
ARCHFLAGS_k15bd123=" -msse4a  -mssse3 -msse4.1 -msse4.2 -mavx -m128bit-long-double -msse2avx "
ARCHPROC_k15bd123=" -march=bdver1 -mtune=generic -g0 -mpreferred-stack-boundary=4 -fno-stack-protector -fno-strict-aliasing "
EXTENSION_k15bd123="k15bd123"

# it is safe to use k10 instead
CFLAG_k14bt1=" $WARNFLAGS ${OPTIMIZE_k14bt1} -g0  -mhard-float -march=amdfam10  -mtune=btver1  -mhard-float -m3dnow -mmmx  -ffast-math   -fexpensive-optimizations -funsafe-loop-optimizations -fpeel-loops -mpreferred-stack-boundary=4 $COMMONFLAGS "
GENFLAGS_k14bt1=" -fmerge-all-constants"
ARCHFLAGS_k14bt1=" -mfpmath=387,sse -msse -msse2 -msse3 -m128bit-long-double -msse4a -mssse3 -mno-sse4.1 -mno-sse4.2  "
ARCHPROC_k14bt1=" -march=amdfam10  -mtune=generic -g0 -mpreferred-stack-boundary=4 -fno-stack-protector -fno-strict-aliasing "
EXTENSION_k14bt1="k14bt1"


CFLAG_k16bt2=" $WARNFLAGS ${OPTIMIZE_k16bt2} -g0  -mhard-float -march=btver2   -mtune=btver2  -mhard-float -m3dnow -mmmx -ffast-math -mavx -msse4 -msse4a  -mcx16 -msahf -msse2avx -mno-movbe -mno-fma -mno-fma4  -fexpensive-optimizations -funsafe-loop-optimizations -fpeel-loops -mpreferred-stack-boundary=4 $COMMONFLAGS "
GENFLAGS_k16bt2=" -fmerge-all-constants"
ARCHFLAGS_k16bt2="  -msse -msse2 -msse3 -msse4a -mssse3 -mno-sse4.1 -mno-sse4.2 -msse2avx "
ARCHPROC_k16bt2=" -march=btver2  -mtune=generic -g0 -mpreferred-stack-boundary=4 -fno-stack-protector -fno-strict-aliasing "
EXTENSION_k16bt2="k16bt2"

CFLAG_gen64=" $WARNFLAGS ${OPTIMIZE_gen64} -g0  -mhard-float -mno-3dnow -mmmx -ffast-math -mno-movbe  -fexpensive-optimizations -funsafe-loop-optimizations -fpeel-loops -mpreferred-stack-boundary=4 $COMMONFLAGS "
GENFLAGS_gen64=" -fmerge-all-constants"
ARCHFLAGS_gen4=" -msse -msse2 -msse3 -mno-sse4 -mno-ssse3 -mno-sse4a  "
ARCHPROC_gen64="  -g0 -mpreferred-stack-boundary=4 -fno-stack-protector -fno-strict-aliasing "
EXTENSION_geb64="gen64"


# does not work!
#CFLAG_3se42avx=" -Wall -Wextra -Wno-unused -Wno-unused-parameter -Wno-system-headers -Wno-uninitialized -Wno-missing-field-initializers -Wno-strict-aliasing -Wno-conversion -Wno-system-headers -Wno-empty-body -Wstrict-prototypes  -Wunsafe-loop-optimizations -Wdisabled-optimization -Wa,-msse-check=warning,-mtune=generic32 -g0 ${OPTIMIZE_2se4a} -fpeel-loops -fgcse-las -fgcse-sm -fomit-frame-pointer -momit-leaf-frame-pointer -march=bdver1 -mtune=generic -mno-bmi -mno-tbm -mavx -mno-fma -mno-movbe -mpreferred-stack-boundary=4 -ffreestanding -fno-exceptions -fno-math-errno -fno-trapping-math -fno-jump-tables -fno-delete-null-pointer-checks -fno-tracer -fno-stack-protector --param max-inline-insns-single=131072 --param inline-unit-growth=350 "
#  -mcx16 -msahf -mno-movbe -maes -mpclmul -mpopcnt -mabm -mlwp -mno-fma -mfma4 -mxop
#GENFLAGS_3se42avx=" -fmerge-all-constants "
#ARCHFLAGS_3se42avx=" -mcx16 -msahf -mno-movbe -maes -mpclmul -mpopcnt -mabm -mlwp -mno-fma -mfma4 -mxop -mno-bmi -mno-tbm -mavx -msse4.2 -msse4.1 "
#ARCHPROC_3se42avx=" -march=i686 -mtune=generic -mpreferred-stack-boundary=4 -fno-stack-protector  -fno-strict-aliasing "
#EXTENSION_3se42avx="k15"




# obsoleted with gcc 4.3.3/4.4 since kernel 2.6.30:
# -funroll-loops :  does lead to "Setup too big!".
# '-O2 -fpeel-loops -fgcse-las -fgcse-sm' is the maximal possible optimization
# do not lead to significant optimization at higher than 1.5GHz level:
# -funsafe-loop-optimizations  -fgcse-after-reload
# no longer needed for kernel consistency :
#                   -fno-toplevel-reorder -fno-align-labels
# forbidden cause of failure or possibly causing code inconsistemcy leading to system freeze:
#   -fshort-enums  -ftree-vectorize -mieee-fp
#

OPTEXT=""
FLAGS=""
GENFLAG=""
ARCHFLAG=""
PROCFLAG=""
EXTENT=""

assign_variables()
{
  local E
  E=$1
  FLAGS="FLAGS=\"\$CFLAG_$E\""
  OPTEXT="OPTEXT=\"\$OPTIMIZE_$E\""
  GENFLAG="GENFLAG=\"\$GENFLAGS_$E\""
  ARCHFLAG="ARCHFLAG=\"\$ARCHFLAGS_$E\""
  PROCFLAG="PROCFLAG=\"\$ARCHPROC_$E\""
  EXTENT="EXTENT=\"\$EXTENSION_$E\""
  eval "$FLAGS"
  eval "$OPTEXT"
  eval "$GENFLAG"
  eval "$ARCHFLAG"
  eval "$PROCFLAG"
  eval "$EXTENT"
}

assign_extent()
{
 local  E  i
 ext=""
 arch=""
 E=$1
##i=1
 for arch in $EXTENTS; do
   if [ "$E" = "$arch" ]; then
    echo "current extent : $arch (= $E ) "
    assign_variables "$arch"
    break
   fi
#   i=$(( $i + 1 ))
 done

}

VERSION=""
PATCHLEVEL=""
SUBLEVEL=""
EXTRAVERSION=""
LOCALVERSION=""
KERNELVERSION=""

assign_kernelversion()
{
  local cfgfile mkfile
  mkfile=$1
  cfgfile=$2
  if [ -e $mkfile ]; then
  if [ -e $cfgfile ]; then

    VERSION=`/bin/busybox grep "VERSION =" <  $mkfile | /bin/busybox  cut -f2  -d "=" | /bin/busybox  cut -f1 -d '-' | /bin/busybox  cut -f1 -d '.' | /bin/busybox  cut -f1 -d '$' | /bin/busybox  tr -d " \n"`
    PATCHLEVEL=`/bin/busybox grep "PATCHLEVEL = " < $mkfile  | /bin/busybox cut -f2 -d= | /bin/busybox  tr -d ' \n'`
    SUBLEVEL=`/bin/busybox grep "SUBLEVEL = " <  $mkfile  | /bin/busybox cut -f2 -d= | /bin/busybox  tr -d ' \n'`
    EXTRAVERSION=`/bin/busybox grep "EXTRAVERSION = " <  $mkfile  | /bin/busybox cut -f2 -d= | /bin/busybox  tr -d ' \n'`
    LOCALVERSION=`/bin/busybox grep "CONFIG_LOCALVERSION=" <  $cfgfile  | /bin/busybox cut -f2 -d= | /bin/busybox tr -d ' \n' | /bin/busybox tr -d '\"'`
    KERNELVERSION=$VERSION.$PATCHLEVEL.$SUBLEVEL$EXTRAVERSION$LOCALVERSION
    echo "Assigned Kernel Version $KERNELVERSION from $mkfile for $cfgfile"
  else
    echo "Configfile $cfgfile not found!"
    exit 254
  fi
  else
    echo "Makefile $mkfile not found!"
    exit 254
  fi
}
#####################
#OPTEXT=""
# FLAGS=""
# GENFLAG=""
# ARCHFLAG=""
# PROCFLAG=""
# EXTENT=""

#assign_variables()
#{
#  local E
#  E=$1
#  FLAGS="${CFLAG[$E]}"
#  OPTEXT="${OPTIMIZE[$E]}"
#  GENFLAG="${GENFLAGS[$E]}"
#  ARCHFLAG="${ARCHFLAGS[$E]}"
#  PROCFLAG="${ARCHPROC[$E]}"
#  EXTENT="${EXTENSION[$E]}"
##  echo $FLAGS
##  echo $GENFLAG
##  echo $ARCHFLAG
##  echo $PROCFLAG
##  echo $EXTENT
#}
#
#assign_extent()
#{
# local  E  i
# ext=""
# arch=""
# E=$1
# i=1
# for arch in $EXTENSIONS; do
#   if [ "$E" = "${EXTENSION[$i]}" ]; then
#    echo "current extent : ${EXTENSION[$i]}"
#    assign_variables "$i"
#    break
#   fi
#   i=$(( $i + 1 ))
# done
#
#}
#
#VERSION=""
#PATCHLEVEL=""
#SUBLEVEL=""
#EXTRAVERSION=""
#LOCALVERSION=""
#KERNELVERSION=""

#assign_kernelversion()
#{
#  local cfgfile mkfile
#  mkfile=$1
#  cfgfile=$2
#  if [ -e $mkfile ]; then
#  if [ -e $cfgfile ]; then

#    VERSION=`grep "VERSION =" <  $mkfile | cut -f2  -d "=" | cut -f1 -d '-' | cut -f1 -d '.' | cut -f1 -d '$' | tr -d " \n"`
#    PATCHLEVEL=`grep "PATCHLEVEL = " < $mkfile  | cut -f2 -d= | tr -d ' \n'`
#    SUBLEVEL=`grep "SUBLEVEL = " <  $mkfile  | cut -f2 -d= | tr -d ' \n'`
#    EXTRAVERSION=`grep "EXTRAVERSION = " <  $mkfile  | cut -f2 -d= | tr -d ' \n'`
#    LOCALVERSION=`grep "CONFIG_LOCALVERSION=" <  $cfgfile  | cut -f2 -d= | tr -d ' \n' | tr -d '\"'`
#    KERNELVERSION=$VERSION.$PATCHLEVEL.$SUBLEVEL$EXTRAVERSION$LOCALVERSION
#    echo "Assigned Kernel Version $KERNELVERSION from $mkfile for $cfgfile"
#  else
#    echo "Configfile $cfgfile not found!"
#    exit 254
#  fi
#  else
#    echo "Makefile $mkfile not found!"
#    exit 254
#  fi
#}

#
