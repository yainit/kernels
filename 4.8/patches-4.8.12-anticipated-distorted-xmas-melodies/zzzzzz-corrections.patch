diff -iwBEr -U 4 linux-4.8h/drivers/gpu/drm/i915/intel_opregion.c linux-4.8s/drivers/gpu/drm/i915/intel_opregion.c
--- linux-4.8h/drivers/gpu/drm/i915/intel_opregion.c	2016-11-23 19:18:36.027330731 +0000
+++ linux-4.8s/drivers/gpu/drm/i915/intel_opregion.c	2016-11-23 19:18:58.910328289 +0000
@@ -796,8 +796,9 @@
 			    &dev_priv->drm.mode_config.connector_list, head) {
 		int display_type = acpi_display_type(connector);
 
 		if (i >= max_outputs) {
+	bool done;
 			DRM_DEBUG_KMS("More than %u outputs in connector list\n",
 				      max_outputs);
 			return;
 		}
diff -iwBEr -U 4 linux-4.8/arch/x86/boot/cpucheck.c linux-4.8.12nm/arch/x86/boot/cpucheck.c
--- linux-4.8/arch/x86/boot/cpucheck.c	2016-10-02 23:24:33.000000000 +0000
+++ linux-4.8.12nm/arch/x86/boot/cpucheck.c	2016-12-07 22:08:18.212214612 +0000
@@ -80,12 +80,14 @@
 static int check_cpuflags(void)
 {
 	u32 err;
 	int i;
-
+    int cpuflag;
 	err = 0;
 	for (i = 0; i < NCAPINTS; i++) {
-		err_flags[i] = req_flags[i] & ~cpu.flags[i];
+		/* err_flags[i] = req_flags[i] & ~cpu.flags[i]; */
+		cpuflag = ~cpu.flags[i];
+		err_flags[i] = req_flags[i] & cpu.flags[i];
 		if (err_flags[i])
 			err |= 1 << i;
 	}
 
@@ -102,9 +104,9 @@
  */
 int check_cpu(int *cpu_level_ptr, int *req_level_ptr, u32 **err_flags_ptr)
 {
 	int err;
-
+    int errflag;
 	memset(&cpu.flags, 0, sizeof cpu.flags);
 	cpu.level = 3;
 
 	if (has_eflag(X86_EFLAGS_AC))
@@ -115,27 +117,40 @@
 
 	if (test_bit(X86_FEATURE_LM, cpu.flags))
 		cpu.level = 64;
 
+	/*
 	if (err == 0x01 &&
 	    !(err_flags[0] &
 	      ~((1 << X86_FEATURE_XMM)|(1 << X86_FEATURE_XMM2))) &&
 	    is_amd()) {
+	    */
+	errflag=~((1 << X86_FEATURE_XMM)|(1 << X86_FEATURE_XMM2));
+	if (err == 0x01 &&
+	    !(err_flags[0] & errflag) &&
+	    is_amd()) {
 		/* If this is an AMD and we're only missing SSE+SSE2, try to
 		   turn them on */
 
 		u32 ecx = MSR_K7_HWCR;
 		u32 eax, edx;
 
 		asm("rdmsr" : "=a" (eax), "=d" (edx) : "c" (ecx));
-		eax &= ~(1 << 15);
+		/* eax &= ~(1 << 15); */
+		eax &= (0x7fff);
 		asm("wrmsr" : : "a" (eax), "d" (edx), "c" (ecx));
 
 		get_cpuflags();	/* Make sure it really did something */
 		err = check_cpuflags();
+    /*
 	} else if (err == 0x01 &&
 		   !(err_flags[0] & ~(1 << X86_FEATURE_CX8)) &&
 		   is_centaur() && cpu.model >= 6) {
+		   */
+	} else { errflag=~(1 << X86_FEATURE_CX8);
+	 if (err == 0x01 && 
+		   !(err_flags[0] & errflag ) && 
+		   is_centaur() && cpu.model >= 6) {
 		/* If this is a VIA C3, we might have to enable CX8
 		   explicitly */
 
 		u32 ecx = MSR_VIA_FCR;
@@ -161,22 +176,28 @@
 		    : : "ecx", "ebx");
 		asm("wrmsr" : : "a" (eax), "d" (edx), "c" (ecx));
 
 		err = check_cpuflags();
+    /*
 	} else if (err == 0x01 &&
 		   !(err_flags[0] & ~(1 << X86_FEATURE_PAE)) &&
 		   is_intel() && cpu.level == 6 &&
 		   (cpu.model == 9 || cpu.model == 13)) {
 		/* PAE is disabled on this Pentium M but can be forced */
+	} else { errflag=~(1 << X86_FEATURE_PAE);
+		 if (err == 0x01 &&
+		   !(err_flags[0] & errflag) &&
+		   is_intel() && cpu.level == 6 &&
+		   (cpu.model == 9 || cpu.model == 13)) {
 		if (cmdline_find_option_bool("forcepae")) {
 			puts("WARNING: Forcing PAE in CPU flags\n");
 			set_bit(X86_FEATURE_PAE, cpu.flags);
 			err = check_cpuflags();
 		}
 		else {
 			puts("WARNING: PAE disabled. Use parameter 'forcepae' to enable at your own risk!\n");
 		}
-	}
+	}}}
 	if (!err)
 		err = check_knl_erratum();
 
 	if (err_flags_ptr)
diff -uNr a/arch/x86/boot/cpu.c b/arch/x86/boot/cpu.c
--- a/arch/x86/boot/cpu.c	2014-12-07 22:21:05.000000000 +0000
+++ b/arch/x86/boot/cpu.c	2015-01-18 13:14:15.968113636 +0000
@@ -88,8 +88,8 @@
 	}
 
 	if (err_flags) {
-		puts("This kernel requires the following features "
-		     "not present on the CPU:\n");
+ 		puts("The preboot kernel check detects requirement for following features\n "
+ 		     "not present on the running Processors:\n");
 		show_cap_strs(err_flags);
 		putchar('\n');
 		return -1;
diff -uNr a/arch/x86/boot/main.c b/arch/x86/boot/main.c
--- a/arch/x86/boot/main.c	2014-12-07 22:21:05.000000000 +0000
+++ b/arch/x86/boot/main.c	2015-01-18 13:16:21.336110408 +0000
@@ -147,9 +147,14 @@
 
 	/* Make sure we have all the proper CPU support */
 	if (validate_cpu()) {
-		puts("Unable to boot - please use a kernel appropriate "
-		     "for your CPU.\n");
-		die();
+		puts("If you do not use compile configuration\n"
+		     "different from YaIniT,  this means:\n"
+		     "Unable to boot - \n"
+		     "please use a kernel appropriate for your CPU\n"
+		     "             ON FUTURE FAILURES ");
+		puts("Otherwise, this kernel will crash on any use\n"
+		     " of the detected missing feature!");
+		/*die();*/
 	}
 
 	/* Tell the BIOS what CPU mode we intend to run in. */
