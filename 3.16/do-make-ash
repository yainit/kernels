#!/bin/busybox ash
# This is universal kernel making script - (C) Dieter Miosga, 2009-12-11 through 2011-03-29

#set -x
#

if [ "$1" = "" ]; then
  echo "missing parameter 1 for kernelversion=\"uname -r\" "
  exit 255
fi

source ./makevars-ash.conf
source ./functions-ash-dm

ALLEXTENTS="$EXTENTS"
#"x86 x86Os x86mmx x86mmxOs k6p3 k7p4 k8p5 k9c2 atom coreix k10"
SECONDEXT=""
RESUME=""
NOPATCH=""


if [ "$2" != "" ]; then
 if `is_substring_of " $2 " " $EXTENTS "`; then 
   ALLEXTENTS="$2"
 fi
else
   NOPATCH="none" 
fi
if [ "$NOPATCH" != "" -a "$2" != "" ]; then 
  echo "missing or invalid parameter 2 for kernelversion=\"uname -r\" "
  echo "it must be in '$EXTENTS'"  
  exit 255
fi

if [ "$3" != "" ]; then
[ "$3" = "resume" ] && RESUME="$3"
[ "$2" = "none" ] && NOPATCH="$2"
[ "$2" = "resume" ] && RESUME="$2"
[ "$3" = "none" ] && NOPATCH="$3"
fi
if [ "$4" != "" ]; then
[ "$4" = "resume" ] && RESUME="$4"
[ "$4" = "none" ] && NOPATCH="$4"
fi


VERSION=""
PATCHLEVEL=""
SUBLEVEL=""
EXTRAVERSION=""
PATCHLEVEL=""
SUBLEVEL=""
EXTRAVERSION=""
KERNELVERSION=""
DIETLIB="/opt/diet032/bin/diet"
if ! [ -e $DIETLIB ]; then
 DIETLIB=""
fi

KERNELVERSION="$1"
SUBDIR=$(ls -1d linux-$KERNELVERSION)
# more than one directory ?
if [ "$(echo "$SUBDIR" | cut -f2 -d" ")" != "$SUBDIR" ]; then echo "file $SUBDIR is not unique or not existing, reconfigure manually!"; exit 254; fi
if  ! [ -e $SUBDIR ]; then echo "file $SUBDIR not found!"; exit 254; fi
HERE="`pwd`"
SUBDIR="$HERE/$SUBDIR"
echo "making kernels for $SUBDIR "
echo "from  $HERE"
echo "with extents $ALLEXTENTS"
#echo "continue?"
#read yesno
#if [ "$yesno" = "no" -o "$yesno" = "n"  ]; then exit 255; fi

if ! [ -e $SUBDIR/Makefile.original ]; then
  cp  $SUBDIR/Makefile $SUBDIR/Makefile.original
fi


#if ! [ -e $SUBDIR/maker ]; then
#  cp -fa  ./maker $SUBDIR/
#fi
#if  ! [ -e $SUBDIR/maker ]; then echo "script file $SUBDIR/maker not found, but necessary!"; exit 254; fi


set_makefile()
{
  local MF line
  #MF=`cat Makefile.original`
  #echo "$MF"
  cat -u Makefile.original | while read -r line; do

    #echo "" >> Makefile-$1
    if [ "`echo $line | grep "CFLAGS_MODULE" `" != "" ]; then
      if [ "`echo $line | grep "_CFLAGS_MODULE" `" = "" ]; then
      if  [ "`echo $line | grep "=" `" != "" ]; then
       if [ "`echo $line | cut -f2 -d "=" | tr -d " " `" = "" ]; then
           echo -E "$line  \$(FLAGS)  \$(ARCHFLAGS)" >> Makefile-$1
       fi
       if [ "`echo $line | cut -f2 -d "=" | tr -d " " `" = "\$(MODFLAGS)" ]; then
          echo -E "$line  \$(FLAGS)  \$(ARCHFLAGS)" >> Makefile-$1
       fi
      else
       echo -E "$line" >> Makefile-$1
      fi
      else
       echo -E "$line" >> Makefile-$1
      fi
    elif  [ "`echo $line | grep "CFLAGS_KERNEL" `" != "" ]; then
      if  [ "`echo $line | grep "_CFLAGS_KERNEL" `" = "" ]; then
      if  [ "`echo $line | grep "=" `" != "" ]; then
       if [ "`echo $line | cut -f2 -d"=" | tr -d " " `" = "" ]; then
         echo -E "$line  \$(FLAGS) \$(GENFLAGS) " >> Makefile-$1
       else
         echo -E "$line" >> Makefile-$1
       fi
      else
       echo -E "$line" >> Makefile-$1
      fi
      else
       echo -E "$line" >> Makefile-$1
      fi
    elif [ "`echo $line | grep "AFLAGS_KERNEL" `" != ""  ]; then
     if [ "`echo $line | grep "_AFLAGS_KERNEL" `" = ""  ]; then
     if  [ "`echo $line | grep "=" `" != "" ]; then
      if [ "`echo $line | cut -f2 -d"=" | tr -d " " `" = "" ]; then
        echo -E "$line  -v  \$(ARCHPROC) " >> Makefile-$1
      else
        echo -E "$line" >> Makefile-$1
      fi
     else
       echo -E "$line" >> Makefile-$1
     fi
     else
       echo -E "$line" >> Makefile-$1
     fi
    elif [ "`echo $line | grep "AFLAGS_MODULE" `" != "" ]; then
     if [ "`echo $line | grep "_AFLAGS_MODULE" `" = "" ]; then
     if  [ "`echo $line | grep "=" `" != "" ]; then
       if [ "`echo $line | cut -f2 -d"=" | tr -d " " `" = "" ]; then
          echo -E "$line  \$(ARCHPROC) -v" >> Makefile-$1
       elif [ "`echo $line | cut -f2 -d "=" | tr -d " " `" = "\$(MODFLAGS)" ]; then
          echo -E "$line  \$(ARCHPROC) -v" >> Makefile-$1
       else
          echo -E "$line" >> Makefile-$1
       fi
     else
       echo -E "$line" >> Makefile-$1
     fi
     else
       echo -E "$line" >> Makefile-$1
     fi
    elif [ "`echo $line | grep "KBUILD_CFLAGS" `" != "" ]; then
       if [ "`echo $line | grep '+=' `" != "" ]; then
         if [ "`echo $line  | cut -f2- -d '=' | tr -d ' ' `" = "-O2" ]; then
          echo -E "KBUILD_CFLAGS += $OPTEXT" >> Makefile-$1
         else
          echo -E "$line" >> Makefile-$1
         fi
       else
        echo -E "$line" >> Makefile-$1
       fi
    elif [ "$(echo $line | grep "HOSTCFLAGS" | grep "=" | grep "O2" | grep "Wall" | grep "Wstrict-prototypes" )" != "" ]; then
      echo -E "$line" >> Makefile-$1
      echo -E "FLAGS = $FLAGS " >> Makefile-$1
      #echo -E "HOSTCFLAGS = \$(FLAGS) " >> Makefile-$1
      echo -E "GENFLAGS   = $GENFLAG  " >> Makefile-$1
      echo -E "ARCHFLAGS  = $ARCHFLAG " >> Makefile-$1
      echo -E "ARCHPROC   = $PROCFLAG  " >> Makefile-$1
      echo -E "CFLAGS = \$(FLAGS) "  >> Makefile-$1
      echo -E "export FLAGS GENFLAGS ARCHFLAGS CFLAGS " >> Makefile-$1
    else
      echo  -E  "$line"  >> Makefile-$1
    fi
  done
}


write_patch()
{

  local line GCPP GASS
  if [ "$NOPATCH" != "none" ]; then
  /bin/busybox cat -u $1.patch | while read -r line; do
     echo "#  $line" >> .config
  done
  fi
  # append the gcc version information
  GCPP=`gcc -v 2>&1`
  echo "$GCPP" | while read -r line; do
     echo "#  $line" >> .config
  done
  # append the gas version information
  GASS=`as -V < /dev/null 2>&1`
  echo "$GASS" | while read -r line; do
     echo "#  $line" >> .config
  done
}

append_patch()
{
   local PATCHED=""
   PATCHED="`/bin/busybox grep "#  > CFLAGS = \$(FLAGS)" < .config 2>/dev/null`"
   if [ "$PATCHED" = "" ]; then
      write_patch "$1"
   fi
}



logerror()
{
  if [ $1 != 0 ]; then
     echo "error in make run"
     echo " `cat makerun.$2 | tail -n 25` "
     echo "error in make run" > /dev/console
     echo " `cat makerun.$2 | tail -n 25` "  > /dev/console

  fi
}

INSTALLDIR=""

maker()
{
local  SFSSUFFIX=""
#local  INSTALLDIR=""
local  KERNELVER=""
local  THISDIR=""
local  SUFFIX=""
local  FN=""
local  ERRORCAUSE=""
local  RC=""
#
if [ "$1" = "" ]; then
  FN=""
  KERNELVER=""
  KERNELVERSION=""
  SUFFIX=""
  FN=`pwd`
  FN="$(basename $FN)"
  KERNELVER=`echo $FN | cut -f2- -d '-' `
  THISDIR=`pwd`
  INSTALLDIR=$THISDIR/../installed
  mkdir -p $INSTALLDIR
  #source  ./Makefile
  VERSION=`grep "VERSION =" < ./Makefile`
  PATCHLEVEL=`grep "PATCHLEVEL =" < ./Makefile`
  SUBLEVEL=`grep "SUBLEVEL =" < ./Makefile`
  EXTRAVERSION=`grep "EXTRAVERSION =" < ./Makefile`
  VERSION=`echo "$VERSION" | cut -f2  -d "=" | cut -f1 -d '-' | cut -f1 -d '.' | cut -f1 -d '$' | tr -d " \n"`
  PATCHLEVEL=`echo $PATCHLEVEL | cut -f2  -d "=" | tr -d " " `
  SUBLEVEL=`echo $SUBLEVEL | cut -f2  -d "="  | tr -d " " `
  EXTRAVERSION=`echo $EXTRAVERSION | cut -f2  -d "="  | tr -d " " `
  KERNELVERSION=$VERSION.$PATCHLEVEL.$SUBLEVEL$EXTRAVERSION
  if [ "$KERNELVER" != "$KERNELVERSION" ]; then echo "Warning: '$KERNELVER' and '$KERNELVERSION' differ, continuing with last..."; KERNELVER=$KERNELVERSION; fi
  source  .config
  SUFFIX=$CONFIG_LOCALVERSION
  if [ "$SUFFIX" = "" ]; then echo "Error: No Suffix found in DOT.config , continuing...."; fi
  /bin/busybox sync 
  startts
  echo "Making bzImage for $KERNELVER$SUFFIX with '$PROCNUM' processors"
  PROCNUM=64
  if [ "$PROCNUM" != "" ]; then
    #$DIETLIB make -j$(( $PROCNUM + $PROCNUM )) bzImage
    $DIETLIB make -j$PROCNUM bzImage
  else
    $DIETLIB make bzImage
  fi
  RC=$?
  if [ $RC -ne 0 ]; then
   logerror "$?"  $SUFFIX # && exitfunc $?
   ERRORCAUSE="`grep 'internal compiler error' ./makerun.$KERNELV 2>/dev/null`"
   if [ "$ERRORCAUSE" != "" ]; then
     sleep 10
     STARTTIME=$(( $STARTTIME + 10 ))
     for COUNT in 1 2 3 4 5 6 7 8 9; do
       $DIETLIB  make bzImage
       RC=$?
       WCOUNT="`grep 'internal compiler error' ./makerun.$KERNELV 2>/dev/null | wc -l`"
       if [ $COUNT -gt $WCOUNT ]; then break; fi
       if [ $RC -eq 0 ]; then break; fi
     done
   else
     exitfunc $RC
   fi
  fi
  sync
  #[ $? -ne 0 ] && logerror "$?" $SUFFIX # && exitfunc $?
  echo "Copying bzImage for $KERNELVER$SUFFIX to diretcory  \"./installed\" "
  /bin/busybox cp arch/x86/boot/bzImage  $INSTALLDIR/bzImage
  /bin/busybox cp System.map  $INSTALLDIR/System.map
  [ "$SUFFIX" != "" ] && /bin/busybox mv -f $INSTALLDIR/bzImage $INSTALLDIR/vmlinuz-$KERNELVER$SUFFIX
  [ "$SUFFIX" != "" ] && /bin/busybox mv -f $INSTALLDIR/System.map $INSTALLDIR/System.map-$KERNELVER$SUFFIX
  if ! [ -e  $INSTALLDIR/vmlinuz-$KERNELVER$SUFFIX ]; then echo "Error: No kernel vmlinuz-$KERNELVER$SUFFIX found ! "; exitfunc 255; fi
  if ! [ -e $INSTALLDIR/System.map-$KERNELVER$SUFFIX ]; then echo "Error: No System.map-$KERNELVER$SUFFIX found ! "; exitfunc 255; fi
  /bin/busybox sync
  echo "Making modules for $KERNELVER$SUFFIX with '$PROCNUM' processors"
  if [ "$PROCNUM" != "" ]; then
    #$DIETLIB make -j$(( $PROCNUM + $PROCNUM )) modules
    $DIETLIB make -j$PROCNUM modules
  else
    $DIETLIB make modules
  fi
  RC=$?
  if [ $RC -ne 0 ]; then
   logerror "$?"  $SUFFIX # && exitfunc $?
   ERRORCAUSE="`grep 'internal compiler error: Segmentation fault' ./makerun.$KERNELV 2>/dev/null`"
   if [ "$ERRORCAUSE" != "" ]; then
     /bin/busybox sleep 10
     STARTTIME=$(( $STARTTIME + 10 ))
     for COUNT in 1 2 3 4 5 6 7 8 9; do
       $DIETLIB  make modules
       WCOUNT="`grep 'internal compiler error: Segmentation fault' ./makerun.$KERNELV 2>/dev/null | wc -l`"
       if [ $COUNT -gt $WCOUNT ]; then break; fi
       if [ $RC -eq 0 ]; then break; fi
     done
   else
     exitfunc $RC
   fi
  fi
  echo "Making modules_install for $KERNELVER$SUFFIX with '$PROCNUM' processors"
  if [ "$PROCNUM" != "" ]; then
    $DIETLIB make -j$PROCNUM modules_install
  else
    $DIETLIB make modules_install
  fi
  [ $? -ne 0 ] && logerror "$?"  $SUFFIX && exitfunc $?
  stopts
  timediff
  echo "Copying modules for $KERNELVER$SUFFIX to $INSTALLDIR "
  /bin/busybox rm -fR $INSTALLDIR/$KERNELVER$SUFFIX
  /bin/busybox cp -RPf /lib/modules/$KERNELVER$SUFFIX   $INSTALLDIR/
  if ! [ -e $INSTALLDIR/$KERNELVER$SUFFIX/modules.dep ]; then echo "Error: No modules directory for $KERNELVER-$SUFFIX copied and found in $INSTALLDIR ! "; exitfunc 255; fi
  /bin/busybox rm -f $INSTALLDIR/$KERNELVER$SUFFIX/source
  /bin/busybox rm -f $INSTALLDIR/$KERNELVER$SUFFIX/build
  /bin/busybox rm -f /lib/modules/$KERNELVER$SUFFIX/source
  /bin/busybox rm -f /lib/modules/$KERNELVER$SUFFIX/build
  cd $INSTALLDIR/$KERNELVER$SUFFIX
  SFSSUFFIX=""
  COMPFLAG=""
  COMPFLAG=`mksquashfs42`
  if [ $? = 127 ]; then
     COMPFLAG=`mksquashfs 2>&1 | grep "Xbcj filter" 2>/dev/null`
     if [ "$COMPFLAG" != "" ]; then
          mksquashfs kernel zp-$KERNELVER$SUFFIX-xz.sfs -all-root -b 1024k -comp xz -Xbcj x86 -Xdict-size 1024k
     else
         if [ $? -ne 0 ] ; then
          /bin/busybox sync
          mksquashfs kernel zp-$KERNELVER$SUFFIX-gz.sfs -all-root -comp gzip
         fi
     fi
  else
    COMPFLAG=`mksquashfs42 2>&1 | grep "Xbcj filter" 2>/dev/null`
    if [ "$COMPFLAG" != "" ]; then
        /bin/busybox sync
        mksquashfs42 kernel zp-$KERNELVER$SUFFIX-xz.sfs -all-root -b 1024k -comp xz -Xbcj x86 -Xdict-size 1024k
    else
        if [ $? -ne 0 ] ; then
          /bin/busybox sync
          mksquashfs42 kernel zp-$KERNELVER$SUFFIX-gz.sfs -all-root -comp gzip
        fi
    fi
  fi
  if [ $? -ne 0 ] ; then
    /bin/busybox sync
    mksquashfs kernel zp-$KERNELVER$SUFFIX-gz.sfs -all-root
    #[ $? -ne 0 ] && mksquashfs4 kernel zp-$KERNELVER$SUFFIX-gz.sfs -all-root
  fi
  if [ $? -eq 0 ]; then
     echo " created squashfs zp-$KERNELVERSION-$EXTENT.sfs ..."
  else
     echo "Errors '$?' in creating squashfs zp-$KERNELVERSION-$EXTENT-compressionextent.sfs ..."
     echo "or mksquashfs command is missing"
  fi
  /bin/busybox sync
  /bin/busybox mv -f zp-$KERNELVER$SUFFIX-gz.sfs $INSTALLDIR
  /bin/busybox mv -f zp-$KERNELVER$SUFFIX-xz.sfs $INSTALLDIR

  cd $THISDIR
  /bin/busybox sync
  $DIETLIB make distclean
  [ $? -ne 0 ] && logerror "$?" $SUFFIX
  /bin/busybox sync
else
  $DIETLIB make -j2 bzImage
  [ $? -ne 0 ] && logerror "$?" $SUFFIX
  $DIETLIB make -j2 modules
  [ $? -ne 0 ] && logerror "$?" $SUFFIX
fi
echo "Finished maker for '$KERNELVER$SUFFIX' into $INSTALLDIR ! Goodbye...."

}

one_make()
{
  if [ "$RESUME" = "" ]; then
    /bin/busybox rm makerun.$1
    /bin/busybox cp -f Makefile.original  Makefile
    make distclean >> makerun.$1  2>&1
    logerror "$?" $2
    make defconfig  >> makerun.$1  2>&1
    logerror "$?" $2
    if [ "$NOPATCH" != "none" ]; then
      /bin/busybox cp -f DOT.config-$2$3  .config
    else
      /bin/busybox cp -f DOT.config-none  .config
      #[ -e .config  ] || cp -f DOT.config  .config
    fi
    # as it is impossible that the makefile is properly assigned,
    # with optimization flags, it has to be patched!
    if [ "$NOPATCH" != "none" ]; then
      patch  Makefile < $2.patch  >> makerun.$1  2>&1
    fi
  fi
  if [ "$NOPATCH" != "none" ]; then
    echo "starting make for kernel $1  with DOT.config-$2$3 "
  else
    echo "starting make for kernel $1  with DOT.config "
  fi
  startts
  #if [ $PROCNUM -gt 2 ]; then PROCNUM=2; fi
  # append the lines of applied patch to .config as comment lines
  # to be sure in kernel debugging....
  append_patch $2

  maker >> makerun.$1  2>&1
  /bin/busybox cp -f makerun.$1 $INSTALLDIR/
  stopts
  timediff
  echo "Finished making '$1' with DOT.config-$2$3  ! Goodbye...."

}


/bin/busybox mkdir -p ./installed


#rm $SUBDIR/Makefile-*

EXT=""
cd $SUBDIR
for EXT in $ALLEXTENTS; do
  if [ "$EXT" != "resume" -a "$EXT" != "none" ]; then
  if ! [ -e Makefile-$EXT ]; then
    assign_extent "$EXT"
    echo "assigned extent: $EXTENT"
    echo "assigned flags: $FLAGS "
    set_makefile  "$EXTENT"
  fi
  if  ! [ -e $EXT.patch ]; then
    #cp -f Makefile-$EXT Makefile
    #if [ "$(readlink]; then
    diff -a -b -w   Makefile.original Makefile-$EXT > $EXT.patch
    #if [ $? != 0 ]; then diff -a  -b -w   Makefile.original Makefile > $EXT.patch; fi
  fi

  fi
done

cd $HERE

if [ "$RESUME" != "resume" -a "$NOPATCH" != "none" ]; then
  if ! [ -e $SUBDIR/DOT.config-$EXT ]; then
  if [ -e configs/DOT.config-$EXT ]; then
     /bin/busybox cp -f configs/DOT.config-$EXT  $SUBDIR/
  fi
  fi
elif [ "$NOPATCH" = "none"  ]; then
  if ! [ -e $SUBDIR/DOT.config-none ]; then
  if [ -e configs/DOT.config-none ]; then
     /bin/busybox cp -f configs/DOT.config-none  $SUBDIR/
     [ $? -ne 0 ] && cp -f configs/DOT.config  $SUBDIR/
  fi
  fi
fi


#echo " Starting make? (yes/no | y/n)"
#read yesno
#if [ "$yesno" = "no" -o "$yesno" = "n"  ]; then
#  exit 0
#fi
EXT=""
for EXT in $ALLEXTENTS; do
if [ "$EXT" != "resume"  ]; then
  if [ "$NOPATCH" != "none" ]; then
    assign_extent "$EXT"
    if [  -e $SUBDIR/Makefile.original ]; then
      if [  -e $SUBDIR/DOT.config-$EXT$SECONDEXT ]; then
        cd $SUBDIR
        assign_kernelversion "Makefile.original" "DOT.config-$EXT$SECONDEXT"
        KERNELV=$VERSION.$PATCHLEVEL.$SUBLEVEL$EXTRAVERSION$LOCALVERSION
        KERNELVERSION=$VERSION.$PATCHLEVEL.$SUBLEVEL$EXTRAVERSION
        if [ "$LOCALVERSION" != "-$EXT" ]; then
          echo "Extension mismatch : Version-extent $LOCALVERSION from DOT.config-$EXT$SECONDEXT file does not match extent !"
          #exit 0
        fi
        if [ "$1" != "$KERNELVERSION" ]; then
          echo "Version mismatch : directory $1 != $KERNELVERSION ! However we continue....."
        fi
        echo "making  vmlinuz-$KERNELV....."
        one_make "$KERNELV" "$EXT" "$SECONDEXT"
        logerror "$?"
        cd $HERE
        #mv ./installed/*.tar.bz2  .
        #rm -fR ./installed/*
      else
        echo " the preconfigured file $SUBDIR/DOT.config-$EXT$SECONDEXT is missing!"
      fi
    else
      echo " the preconfigured file $SUBDIR/Makefile.original is missing!"
    fi

  else
    if [  -e $SUBDIR/Makefile.original ]; then
      if [  -e $SUBDIR/DOT.config ]; then
        cd $SUBDIR
        assign_kernelversion "Makefile.original" "DOT.config"
        KERNELV=$VERSION.$PATCHLEVEL.$SUBLEVEL$EXTRAVERSION$LOCALVERSION
        KERNELVERSION=$VERSION.$PATCHLEVEL.$SUBLEVEL$EXTRAVERSION
        if [ "$LOCALVERSION" != "-$EXT" ]; then
          echo "Extension mismatch : Version-extent $LOCALVERSION from DOT.config file does not match extent !"
          #exit 0
        fi
        if [ "$1" != "$KERNELVERSION" ]; then
          echo "Version mismatch : directory $1 != $KERNELVERSION ! However we continue....."
        fi
        echo "making  vmlinuz-$KERNELV....."
        one_make "$KERNELV" "" ""
        logerror "$?"
        cd $HERE
        #mv ./installed/*.tar.bz2  .
        #rm -fR ./installed/*
      else
        echo " the preconfigured file $SUBDIR/DOT.config[-none] is missing!"
      fi
    else
      echo " the preconfigured file $SUBDIR/Makefile.original is missing!"
    fi
  fi
fi
done
#
exit 0
#
