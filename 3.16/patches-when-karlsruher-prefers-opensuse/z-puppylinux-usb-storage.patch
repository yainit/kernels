--- a/drivers/usb/storage/usb.c	2012-03-25 15:01:56.000000000 +0300
+++ b/drivers/usb/storage/usb.c	2012-03-25 16:03:41.000000000 +0300
@@ -81,7 +81,11 @@
 MODULE_DESCRIPTION("USB Mass Storage driver for Linux");
 MODULE_LICENSE("GPL");
 
+#ifdef CONFIG_PUPPY 
 static unsigned int delay_use = 1;
+#else
+static unsigned int delay_use = 0;
+#endif
 module_param(delay_use, uint, S_IRUGO | S_IWUSR);
 MODULE_PARM_DESC(delay_use, "seconds to delay before using a new device");
 
@@ -889,6 +893,9 @@
 	}
 	scsi_scan_host(us_to_host(us));
 	dev_dbg(dev, "scan complete\n");
+#ifdef CONFIG_PUPPY 
+	printk(KERN_DEBUG "usb-storage: device scan complete\n");
+#endif
 
 	/* Should we unbind if no devices were detected? */
 
@@ -972,6 +979,9 @@
 {
 	int result;
 	struct device *dev = &us->pusb_intf->dev;
+#ifdef CONFIG_PUPPY 
+	printk(KERN_DEBUG "usb-storage: device found at %d\n", us->pusb_dev->devnum);
+#endif
 
 	/* Make sure the transport and protocol have both been set */
 	if (!us->transport || !us->proto_handler) {
@@ -1017,8 +1027,12 @@
 	usb_autopm_get_interface_no_resume(us->pusb_intf);
 	set_bit(US_FLIDX_SCAN_PENDING, &us->dflags);
 
+#ifdef CONFIG_PUPPY
 	if (delay_use > 0)
 		dev_dbg(dev, "waiting for device to settle before scanning\n");
+		printk(KERN_DEBUG "usb-storage: waiting for device "
+				"to settle before scanning\n");		
+#endif
 	queue_delayed_work(system_freezable_wq, &us->scan_dwork,
 			delay_use * HZ);
 	return 0;
--- a/drivers/usb/storage/Kconfig	2014-11-06 00:49:45.173252416 +0000
+++ b/drivers/usb/storage/Kconfig	2014-11-06 00:51:58.755256667 +0000
@@ -32,6 +32,13 @@
 	  Say Y here in order to have the USB Mass Storage code generate
 	  verbose debugging messages.
 
+config PUPPY
+	bool "USB Mass Storage for Puppylinux"
+	depends on USB_STORAGE
+	help
+	  Say Y here in order to activate Puppy/Quirkylinux patch
+	  and obtain extra debug messages necessary for Puppylinux's runtime scripts.
+
 config USB_STORAGE_REALTEK
 	tristate "Realtek Card Reader support"
 	depends on USB_STORAGE
