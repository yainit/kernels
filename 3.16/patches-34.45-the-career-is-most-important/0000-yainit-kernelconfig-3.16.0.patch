diff -uNr linux-3.14/arch/x86/Kconfig.cpu linux-3.14-xconfig/arch/x86/Kconfig.cpu
--- linux-3.14/arch/x86/Kconfig.cpu	2014-03-31 03:40:15.000000000 +0000
+++ linux-3.14-xconfig/arch/x86/Kconfig.cpu	2014-06-25 20:27:28.956116809 +0000
@@ -21,145 +21,139 @@
 	  the one you have chosen, e.g. a Pentium optimized kernel will run on
 	  a PPro, but not necessarily on a i486.
 
-	  Here are the settings recommended for greatest speed:
-	  - "486" for the AMD/Cyrix/IBM/Intel 486DX/DX2/DX4 or
-	  SL/SLC/SLC2/SLC3/SX/SX2 and UMC U5D or U5S.
-	  - "586" for generic Pentium CPUs lacking the TSC
-	  (time stamp counter) register.
-	  - "Pentium-Classic" for the Intel Pentium.
-	  - "Pentium-MMX" for the Intel Pentium MMX.
-	  - "Pentium-Pro" for the Intel Pentium Pro.
-	  - "Pentium-II" for the Intel Pentium II or pre-Coppermine Celeron.
-	  - "Pentium-III" for the Intel Pentium III or Coppermine Celeron.
-	  - "Pentium-4" for the Intel Pentium 4 or P4-based Celeron.
-	  - "K6" for the AMD K6, K6-II and K6-III (aka K6-3D).
-	  - "Athlon" for the AMD K7 family (Athlon/Duron/Thunderbird).
-	  - "Crusoe" for the Transmeta Crusoe series.
-	  - "Efficeon" for the Transmeta Efficeon series.
-	  - "Winchip-C6" for original IDT Winchip.
-	  - "Winchip-2" for IDT Winchips with 3dNow! capabilities.
-	  - "GeodeGX1" for Geode GX1 (Cyrix MediaGX).
-	  - "Geode GX/LX" For AMD Geode GX and LX processors.
-	  - "CyrixIII/VIA C3" for VIA Cyrix III or VIA C3.
-	  - "VIA C3-2" for VIA C3-2 "Nehemiah" (model 9 and above).
-	  - "VIA C7" for VIA C7.
+	  Read carefully the following processor core sections to choose
+	  the generic or most adapted architecture for your purpose.
 
 	  If you don't know what to do, choose "486".
 
 config M586
-	bool "586/K5/5x86/6x86/6x86MX"
+	bool "Generic Intel/AMD 586/K5/5x86/6x86/6x86MX"
 	depends on X86_32
 	---help---
+	  
 	  Select this for an 586 or 686 series processor such as the AMD K5,
 	  the Cyrix 5x86, 6x86 and 6x86MX.  This choice does not
-	  assume the RDTSC (Read Time Stamp Counter) instruction.
-
-config M586TSC
-	bool "Pentium-Classic"
-	depends on X86_32
-	---help---
-	  Select this for a Pentium Classic processor with the RDTSC (Read
-	  Time Stamp Counter) instruction for benchmarking.
-
-config M586MMX
-	bool "Pentium-MMX"
-	depends on X86_32
-	---help---
-	  Select this for a Pentium with the MMX graphics/multimedia
-	  extended instructions.
-
-config M686
-	bool "Pentium-Pro"
-	depends on X86_32
-	---help---
-	  Select this for Intel Pentium Pro chips.  This enables the use of
-	  Pentium Pro extended instructions, and disables the init-time guard
-	  against the f00f bug found in earlier Pentiums.
-
-config MPENTIUMII
-	bool "Pentium-II/Celeron(pre-Coppermine)"
-	depends on X86_32
-	---help---
-	  Select this for Intel chips based on the Pentium-II and
-	  pre-Coppermine Celeron core.  This option enables an unaligned
-	  copy optimization, compiles the kernel with optimization flags
-	  tailored for the chip, and applies any applicable Pentium Pro
-	  optimizations.
-
-config MPENTIUMIII
-	bool "Pentium-III/Celeron(Coppermine)/Pentium-III Xeon"
-	depends on X86_32
-	---help---
-	  Select this for Intel chips based on the Pentium-III and
-	  Celeron-Coppermine core.  This option enables use of some
-	  extended prefetch instructions in addition to the Pentium II
-	  extensions.
-
-config MPENTIUMM
-	bool "Pentium M"
-	depends on X86_32
-	---help---
-	  Select this for Intel Pentium M (not Pentium-4 M)
-	  notebook chips.
-
-config MPENTIUM4
-	bool "Pentium-4/Celeron(P4-based)/Pentium-4 M/older Xeon"
-	depends on X86_32
-	---help---
-	  Select this for Intel Pentium 4 chips.  This includes the
-	  Pentium 4, Pentium D, P4-based Celeron and Xeon, and
-	  Pentium-4 M (not Pentium M) chips.  This option enables compile
-	  flags optimized for the chip, uses the correct cache line size, and
-	  applies any applicable optimizations.
-
-	  CPUIDs: F[0-6][1-A] (in /proc/cpuinfo show = cpu family : 15 )
-
-	  Select this for:
-	    Pentiums (Pentium 4, Pentium D, Celeron, Celeron D) corename:
-		-Willamette
-		-Northwood
-		-Mobile Pentium 4
-		-Mobile Pentium 4 M
-		-Extreme Edition (Gallatin)
-		-Prescott
-		-Prescott 2M
-		-Cedar Mill
-		-Presler
-		-Smithfiled
-	    Xeons (Intel Xeon, Xeon MP, Xeon LV, Xeon MV) corename:
-		-Foster
-		-Prestonia
-		-Gallatin
-		-Nocona
-		-Irwindale
-		-Cranford
-		-Potomac
-		-Paxville
-		-Dempsey
+	  assume the RDTSC (Read Time Stamp Counter) instruction and the PAE feature
+	  is software emulated. For generic MMX feature usage choose the Winchip-2/-3 below.
+	  Enables -march=i586 -mtune=generic
+
+config MMMX
+	bool "Generic x86 with MMX "
+	depends on X86_32
+	---help---
+	  
+	  Select this for chips based on i586 generic processor architecture.
+	  These are all x86 architectures older than Pentium-Pro,
+	  with capability for MMX instructions, PAE 
+	  Page Allocation Extensions 
+	  Useful for generic kernels through all higher architectures 
+	  with x86_32 and MMX extensions support.
+	  Enables -march=winchip2 -mtune=generic
+	  If you need MMX support, choose CONFIG_MMMX3DNOW 
+
+config MSSE
+	bool "Generic x86 MMX and SSE instruction architecture support "
+	depends on X86_32
+	---help---
+	  
+	  Select this for generic i686 processor with MMX and 
+	  Streaming SIMD (Single Instruction Multiple Data) Extensions (SSE) support.
+	  Supersets i686,PAT,PAE,MMX,SSE
+	  Enables -march=i686 -mtune=generic
+	  If you need MMX support, choose CONFIG_MMMX3DNOW 
+	  
+
+config MSSE2
+	bool "Generic x86 SSE2 instruction architecture support "
+	depends on X86_32
+	---help---
+	  
+	  Select this for generic i686 processor with MMX and 
+	  Streaming SIMD (Single Instruction Multiple Data) Extensions (SSE) support.
+	  Supersets i686,PAT,PAE,MMX,SSE,SSE2
+	  Enables -march=i686 -mtune=generic
+	  If you need MMX support, choose CONFIG_MMMX3DNOW 
+	  
+
+config MSSE3
+	bool "Generic x86_32 SSE3 instruction architecture support "
+	depends on X86_32
+	---help---
+	  
+	  Select this for generic i686 processor with MMX and 
+	  Streaming SIMD (Single Instruction Multiple Data) Extensions (SSE) support.
+	  Supersets i686,PAT,PAE,MMX,SSE,SSE2,SSE3
+	  Enables -march=i686 -mtune=generic
+	  If you need MMX support, choose CONFIG_MMMX3DNOW 
+	  
+
+config MSSSE3
+	bool "Generic x86_32/x86_64 SSSE3  instruction architecture support "
+	depends on X86_32 || X86_64
+	---help---
+	  
+	  Select this for generic i686 processor with MMX and Supplemental 
+	  Streaming SIMD (Single Instruction Muiltiple Data) Extensions (SSSE3) support.
+	  Supersets atom,PAT,PAE,MMX,SSE,SSE2,SSE3,SSSE3
+	  Enables -march=i686 -mtune=core2 
+	  If you need MMX support, choose CONFIG_MMMX3DNOW 
+	  
+
+config MSSE412
+	bool "Generic x86_32/x86_64 SSE4.1+SSE4.2 instruction architecture support "
+	depends on X86_32 || X86_64
+	---help---
+	  
+	  Select this for generic i686 processor with MMX and Supplemental 
+	  Streaming SIMD (Single Instruction Muiltiple Data) Extensions (SSSE3) support.
+	  Supersets i686,PAT,PAE,MMX,SSE,SSE2,SSE3,SSSE3,SSE4.1,SSE4.2
+	  Enables -march=i686 -mtune=nehalem 
+	  If you need MMX support, choose CONFIG_MMMX3DNOW 
+	  
+
+config MSSE4A
+	bool "Generic x86_32/x86_64 SSE4A instruction architecture support "
+	depends on X86_32 || X86_64
+	---help---
+	  
+	  Select this for generic i686 processor with MMX and 
+	  Supplemental SIMD (Single Instruction Muiltiple Data) Extensions (SSE) support.
+	  Supersets athlon,PAT,PAE,MMX,SSE,SSE2,SSE3,SSE4A,CX16
+	  Enables -march=athlon -mtune=amdfam10 
+	  If you need MMX support, choose CONFIG_MMMX3DNOW 
+	  
+
+config MAVX
+	bool "Generic x86_32/x86_64 AVX instruction architecture support "
+	depends on X86_32 || X86_64
+	select MMMX3DNOW
+	---help---
+	  
+	  Select this for generic i686 processor with AVX Instructions support.
+	  Supersets i686,PAT,PAE,MMX,SSE,SSE2,SSE3,SSSE3,SSE4_1,SSE4_2,AVX
+	  Enables -march=i686 -mtune=sandybridge and
+	  -msse4 -msse2avx -mavx -maes  -mcx16 -msahf
+
+config MAVX2
+	bool "Generic x86_32/x86_64 AVX2 instruction architecture support "
+	depends on X86_32 || X86_64
+	select MMMX3DNOW
+	---help---
+	  
+	  Select this for generic i686 processor with AVX2 Instructions support.
+	  Supersets i686,PAT,PAE,MMX,SSE,SSE2,SSE3,SSSE3,SSE4_1,SSE4_2,AVX,AVX2
+	  Enables -march=i686 -mtune=haswell and
+	  -msse4 -msse2avx -mavx -mavx2 -maes -mbmi -mcx16 -msahf -mf16c -mfma
 
 
 config MK6
-	bool "K6/K6-II/K6-III"
+	bool "AMD K6/K6-II/K6-III"
 	depends on X86_32
 	---help---
 	  Select this for an AMD K6-family processor.  Enables use of
 	  some extended instructions, and passes appropriate optimization
 	  flags to GCC.
 
-config MK7
-	bool "Athlon/Duron/K7"
-	depends on X86_32
-	---help---
-	  Select this for an AMD Athlon K7-family processor.  Enables use of
-	  some extended instructions, and passes appropriate optimization
-	  flags to GCC.
-
-config MK8
-	bool "Opteron/Athlon64/Hammer/K8"
-	---help---
-	  Select this for an AMD Opteron or Athlon64 Hammer-family processor.
-	  Enables use of some extended instructions, and passes appropriate
-	  optimization flags to GCC.
 
 config MCRUSOE
 	bool "Crusoe"
@@ -189,17 +183,17 @@
 	---help---
 	  Select this for an IDT Winchip-2, 2A or 3.  Linux and GCC
 	  treat this chip as a 586TSC with some extended instructions
-	  and alignment requirements.  Also enable out of order memory
-	  stores for this CPU, which can increase performance of some
-	  operations.
+	  and alignment requirements (including MMX).  
+	  You can also enable out of order memory stores for this CPU, 
+	  which can increase performance of some operations.
+	  Enables -march=winchip2 -mtune=generic
 
 config MELAN
 	bool "AMD Elan"
 	depends on X86_32
 	---help---
 	  Select this for an AMD Elan processor.
-
-	  Do not use this option for K6/Athlon/Opteron processors!
+	  Do not use this option for AMD K6/Athlon/Opteron processors!
 
 config MGEODEGX1
 	bool "GeodeGX1"
@@ -240,34 +234,417 @@
 	  Select this for a VIA C7.  Selecting this uses the correct cache
 	  shift and tells gcc to treat the CPU as a 686.
 
+config MK7
+	bool "AMD Athlon/Duron/K7"
+	depends on X86_32
+	select MMMX3DNOW
+	---help---
+	  Select this for an AMD Athlon K7-family processor.  Enables use of
+	  some extended instructions, and passes appropriate optimization
+	  flags to GCC.
+	  Enables -march=athlon -mtune=athlon -mmmx -m3dnow,
+	  modules -msse 
+	  -mtune=generic depends on CONFIG_X86_GENERIC
+
+config MK8
+	bool "AMD K8 Opteron/Athlon64/Hammer"
+	select MMMX3DNOW
+	---help---
+
+	  Select this for an AMD Opteron or Athlon64 Hammer-family processor.
+	  Enables use of some extended instructions, and passes appropriate
+	  optimization flags to GCC. Processors based on the AMD K8 core
+	  with x86-64 instruction set support, including the AMD Opteron,
+	  Athlon 64, and Athlon 64 FX processors.
+	  This supersets MMX, SSE, SSE2, 3DNow!,
+	  enhanced 3DNow! and 64-bit instruction set extensions.
+	  Enables -march=k8 -mtune=k8 -mmmx -m3dnow,
+	  modules -msse2 -m96bit-long-double
+	  -mtune=generic depends on CONFIG_X86_GENERIC
+
+config MK8SSE3
+	bool "AMD K8-SSE3 advanced Opteron/Athlon64/Hammer"
+	select MMMX3DNOW
+	---help---
+	  Improved versions of AMD K8 cores 
+	  with SSE3 instruction set support.
+	  Enables -march=k8-sse3 -mtune=k8-sse3 -mmx -m3dnow 
+	  modules -msse3 -m128it-long-double
+	  -mtune=generic depends on CONFIG_X86_GENERIC
+
+config MK10
+	bool "AMD 61xx/7x50/PhenomX3/X4/II/K10"
+	select MMMX3DNOW
+	---help---
+	  Select this for an AMD 61xx Eight-Core Magny-Cours, Athlon X2 7x50,
+	  Phenom X3/X4/II, Athlon II X2/X3/X4, or Turion II-family processor.
+	  Enables use of some extended instructions, and passes appropriate
+	  optimization flags to GCC.
+	  supersets MMX, SSE, SSE2, SSE3, SSE4A, 3DNow!,
+	  enhanced 3DNow!, ABM and 64-bit instruction
+	  Enables -march=amdfam10 -mtune=amdfam10 -mmmx -m3dnow,
+	  modules -msse3 -msse4a -m128bit-long-double 
+	  -mtune=generic depends on CONFIG_X86_GENERIC
+
+config MBARCELONA
+	bool "AMD Barcelona"
+	select MMMX3DNOW
+	---help---
+	  Select this for AMD Barcelona and newer processors.
+	  supersets MMX, SSE, SSE2, SSE3, SSE4A, 3DNow!,
+	  enhanced 3DNow!, ABM and 64-bit instruction
+	  Enables -march=barcelona -mtune=barcelona -mmmx -m3dnow,
+	  modules -msse3 -msse4a -m128bit-long-double 
+	  -mtune=generic depends on CONFIG_X86_GENERIC
+
+config MK14
+	bool "AMD K14 Bobcat Family processors"
+	select MMMX3DNOW
+	---help---
+	  Select this for AMD Bobcat processors, CPUs based on
+	  AMD Family 14h cores with x86-64 instruction set support.
+	  This supersets MMX, SSE, SSE2, SSE3, SSSE3, SSE4A, CX16,
+	  ABM and 64-bit instruction set extensions.
+	  Enables -march=btver1 -mtune=btver1 -mmmx -m3dnow -mcx16 -msahf,
+	  modules -msse3 -mssse3 -msse4a -m128bit-long-double 
+	  -mtune=generic depends on CONFIG_X86_GENERIC
+
+config MK16
+	bool "AMD K16 Jaguar"
+	select MMMX3DNOW
+	---help---
+
+	  Select this for AMD Jaguar processors, CPUs based on
+	  AMD Family 16h cores with x86-64 instruction set support.
+	  This includes MOVBE, F16C, BMI, AVX, PCLMUL, AES, SSE4.2, SSE4.1,
+	  CX16, ABM, SSE4A, SSSE3, SSE3, SSE2, SSE, MMX
+	  and 64-bit instruction set extensions.
+	  Enables -march=btver2 -mtune=btver2 and 
+	  -mcx16 -msahf -mpclmul -mssse3 -msse4 -msse4a -mavx -msse2avx ,
+	  -mtune=generic depends on CONFIG_X86_GENERIC
+
+config MK15
+	bool "AMD K15 Bulldozer"
+	select MMMX3DNOW
+	---help---
+	  Select this for AMD Bulldozer processors, CPUs based on
+	  AMD Family 15h cores with x86-64 instruction set support.
+	  This supersets FMA4, AVX, XOP, LWP, AES, PCLMUL, CX16, MMX,
+	  SSE, SSE2, SSE3, SSE4A, SSSE3, SSE4.1, SSE4.2,
+	  ABM and 64-bit instruction set extensions.
+	  Enables -march=bdver1 -mtune=bdver1 and 
+	  -mcx16 -msahf -mpclmul -mssse3 -msse4 -msse4a -mavx -msse2avx ,
+	  -mtune=generic depends on CONFIG_X86_GENERIC
+
+config MK15II
+	bool "AMD K15-II Piledriver"
+	select MMMX3DNOW
+	---help---
+	  Select this for AMD Piledriver processors, AMD Family 15h core
+	  based CPUs with x86-64 instruction set support.
+	  This supersets BMI, TBM, F16C, FMA, FMA4, AVX, XOP, LWP, AES,
+	  PCLMUL, CX16, MMX, SSE, SSE2, SSE3, SSE4A, SSSE3, SSE4.1, SSE4.2,
+	  ABM and 64-bit instruction set extensions.
+	  Enables -march=bdver2 -mtune=bdver2 ,
+	  -mcx16 -msahf -mpclmul -mssse3 -msse4 -msse4a -mavx -msse2avx -mfma4 -mf16c -mbmi,
+	  -mtune=generic depends on CONFIG_X86_GENERIC
+
+config MK15III
+	bool "AMD K15-III Steamroller"
+	select MMMX3DNOW
+	---help---
+	  Select this for AMD Steamroller processors, AMD Family 15h core
+	  based CPUs with x86-64 instruction set support.
+	  This supersets BMI, TBM, F16C, FMA, FMA4, FS-GSBASE, AVX, XOP,
+	  LWP, AES, PCL_MUL, CX16, MMX, SSE, SSE2, SSE3, SSE4A, SSSE3,
+	  SSE4.1, SSE4.2, ABM and 64-bit instruction set extensions.
+	  Enables -march=bdver3 -mtune=bdver3,
+	  -mcx16 -msahf -mpclmul -mssse3 -msse4 -msse4a -mavx -msse2avx,
+	  -mtune=generic depends on CONFIG_X86_GENERIC
+
+config MK18
+	bool "AMD K18/K15-IV  Excavator"
+	select MMMX3DNOW
+	---help---
+	  Select this for AMD Excavator processors, AMD Family 15h core
+	  based CPUs with x86-64 instruction set support.
+	  This supersets BMI, BMI2, TBM, F16C, FMA, FMA4, FSGSBASE, AVX, AVX2,
+	  XOP, LWP, AES, PCL MUL, CX16, MOVBE, MMX, SSE, SSE2, SSE3, SSE4A,
+	  SSSE3, SSE4.1, SSE4.2, ABM and 64-bit instruction set extensions.
+	  Enables -march=bdver4 -mtune=bdver4 and
+	  -mcx16 -msahf -mpopcnt -mpclmul -mf16c -mfma4 -msse4a -msse4 -msse2avx -mavx2 -mbmi2
+	  -mtune=generic depends on CONFIG_X86_GENERIC
+
+config M586TSC
+	bool "Intel Pentium-Classic"
+	select MHARDFLOAT
+	depends on X86_32
+	---help---
+
+	  Select this for a Pentium Classic processor with the RDTSC (Read
+	  Time Stamp Counter) instruction for benchmarking. The PAE feature
+	  is software emulated. For generic MMX feature usage choose the Winchip-2/-3 below.
+	  Enables -march=i586  -mtune=generic
+
+config M586MMX
+	bool "Intel Pentium-MMX"
+	select MMMX3DNOW
+	depends on X86_32
+	---help---
+
+	  Select this for a Pentium with the MMX graphics/multimedia
+	  extended instructions.
+	  Enables -march=pentium-mmx -mtune=pentium-mmx
+	  -mtune=generic depends on CONFIG_X86_GENERIC
+
+config M686
+	bool "Intel Pentium-Pro - Generic i686"
+	depends on X86_32
+	---help---
+	  
+	  Select this for chips based on i686 generic processor architecture.
+	  These are all x86 architectures older than Pentium-Pro,
+	  with capability for PAE / physical
+	  Page Allocation Extensions and PAT Hardware extensions, these
+	  are the physical Page Allocation Table extensions. 
+	  It enables the use of Pentium Pro extended instructions, 
+	  and disables the init-time guard against the f00f bug, found in earlier Pentiums.
+	  Useful for generic kernels through all higher architectures with x86_32 support.
+	  Enables -march=i686 -mtune=generic
+	  If you need MMX support, choose CONFIG_MMMX3DNOW 
+
+
+config MPENTIUMII
+	bool "Intel Pentium-II/Celeron(pre-Coppermine)"
+	select MMMX3DNOW
+	depends on X86_32
+	---help---
+	  
+	  Select this for Intel chips based on the Pentium-II and
+	  pre-Coppermine Celeron core.  This option enables an unaligned
+	  copy optimization, compiles the kernel with optimization flags
+	  tailored for the chip, and applies any applicable Pentium Pro
+	  optimizations.
+	  Enables -march=pentium2 -mtune=pentium2 
+	  -mtune=generic depends on CONFIG_X86_GENERIC
+
+config MPENTIUMIII
+	bool "Intel Pentium-III/Celeron(Coppermine)/Pentium-III Xeon"
+	select MMMX3DNOW
+	depends on X86_32
+	---help---
+	  
+	  Select this for Intel chips based on the Pentium-III and
+	  Celeron-Coppermine core.  This option enables use of some
+	  extended prefetch instructions in addition to the Pentium II
+	  extensions.
+	  Enables -march=pentium3  -mtune=pentium3 
+	  -mtune=generic depends on CONFIG_X86_GENERIC
+
+config MPENTIUMM
+	bool "Intel Pentium M"
+	select MMMX3DNOW
+	depends on X86_32
+	---help---
+	  
+	  Select this for Intel Pentium M (not Pentium-4 M)
+	  notebook chips.
+	  Enables -march=pentium-m -mtune=pentium-m
+	  -mtune=generic depends on CONFIG_X86_GENERIC
+
+config MPENTIUM4
+	bool "Intel Pentium-4/Celeron(P4-based)/Pentium-4 M/older Xeon"
+	select MMMX3DNOW
+	depends on X86_32
+	---help---
+	  
+	  Select this for Intel Pentium 4 chips.  This includes the
+	  Pentium 4, Pentium D, P4-based Celeron and Xeon, and
+	  Pentium-4 M (not Pentium M) chips.  This option enables compile
+	  flags optimized for the chip, uses the correct cache line size, and
+	  applies any applicable optimizations.
+
+	  CPUIDs: F[0-6][1-A] (in /proc/cpuinfo show = cpu family : 15 )
+
+	  Select this for:
+	    Pentiums (Pentium 4, Pentium D, Celeron, Celeron D) corename:
+		-Willamette
+		-Northwood
+		-Mobile Pentium 4
+		-Mobile Pentium 4 M
+		-Extreme Edition (Gallatin)
+	    Xeons (Intel Xeon, Xeon MP, Xeon LV, Xeon MV) corename:
+		-Foster
+		-Prestonia
+		-Gallatin
+	  Enables -march=pentium4 -mtune=pentium4
+	  -mtune=generic depends on CONFIG_X86_GENERIC
+
 config MPSC
 	bool "Intel P4 / older Netburst based Xeon"
+	select MMMX3DNOW
 	depends on X86_64
 	---help---
+    
 	  Optimize for Intel Pentium 4, Pentium D and older Nocona/Dempsey
 	  Xeon CPUs with Intel 64bit which is compatible with x86-64.
 	  Note that the latest Xeons (Xeon 51xx and 53xx) are not based on the
 	  Netburst core and shouldn't use this option. You can distinguish them
 	  using the cpu family field
 	  in /proc/cpuinfo. Family 15 is an older Xeon, Family 6 a newer one.
+	  Enables -march=nocona -mtune=nocona,
+	  -mtune=generic depends on CONFIG_X86_GENERIC
 
-config MCORE2
-	bool "Core 2/newer Xeon"
+config MPRESCOTT
+	bool "Intel Pentium4 Prescott"
+	select MMMX3DNOW
+	depends on X86_32
 	---help---
 
-	  Select this for Intel Core 2 and newer Core 2 Xeons (Xeon 51xx and
-	  53xx) CPUs. You can distinguish newer from older Xeons by the CPU
-	  family in /proc/cpuinfo. Newer ones have 6 and older ones 15
-	  (not a typo)
+	  Select this for Prescott processors, the improved version of
+	  Intel Pentium 4 CPU chips with HyperThreading. One physical core
+	  appears as two logicals and is accessed with cache and register splitting.
+	  Includes  MMX, SSE, SSE2 and SSE3 instruction set support.
+	  Enables -march=prescott -mtune=prescott -mmmx, 
+	  -mtune=generic depends on CONFIG_X86_GENERIC
+
+config MNOCONA
+	bool "Intel Pentium4 Nocona"
+	select MMMX3DNOW
+	depends on X86_32
+	---help---
+	  Select this for Nocona processors,  the Improved version of
+	  Intel Pentium 4 CPU chips with EM64T support and real physical
+	  64-bit extensions, MMX, SSE, SSE2 and SSE3 instruction set support.
+	  With Nocona support compiled kernels won't run on 686/Prescott compatibles!
+	  Enables -march=nocona -mtune=nocona -mmmx,
+	  -mtune=generic depends on CONFIG_X86_GENERIC
 
 config MATOM
 	bool "Intel Atom"
+	select MMMX3DNOW
 	---help---
 
 	  Select this for the Intel Atom platform. Intel Atom CPUs have an
 	  in-order pipelining architecture and thus can benefit from
 	  accordingly optimized code. Use a recent GCC with specific Atom
 	  support in order to fully benefit from selecting this option.
+	  The processor extensions are the same as for Bonnell.
+	  The generic setting for all Intel/AMD SSSE3 capable processors is:
+	  -march=i686 -mtune=core2 -mno-movbe -mno-cx16 -mno-3dnow -mmmx
+	  Enables -march=atom -mtune=atom -mmmx,
+	  -mtune=generic depends on CONFIG_X86_GENERIC
+
+config MBONNELL
+	bool "Intel Atom Bonnell"
+	select MMMX3DNOW
+	---help---
+
+	  Select this for the Intel Atom Bonnell platform.
+	  Intel Bonnell CPU with 64-bit extensions, MOVBE, MMX, SSE,
+	  SSE2, SSE3 and SSSE3 instruction set support.
+	  Enables -march=bonnell  -mtune=bonnell -mmmx
+	  -mtune=generic depends on CONFIG_X86_GENERIC
+
+config MSILVERMONT
+	bool "Intel Atom Silvermont"
+	select MMMX3DNOW
+	---help---
+
+	  Select this for the Intel Atom Silvermont platform, CPU with
+	  64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3,
+	  SSE4.1, SSE4.2, POPCNT, AES, PCLMUL and RDRND instruction set support.
+	  Enables -march=silvermont  -mtune=silvermont -mmmx
+	  -mtune=generic depends on CONFIG_X86_GENERIC
+
+config MCORE2
+	bool "Intel Core 2"
+	select MMMX3DNOW
+	---help---
+
+	  Select this for Intel Core 2 and newer Core 2 Xeons (Xeon 51xx and
+	  53xx) CPUs. You can distinguish newer from older Xeons by the CPU
+	  family in /proc/cpuinfo. Newer ones have 6 and older ones 15 (not a typo)
+	  and all are CPUs with 64-bit extensions, MMX, SSE, SSE2, SSE3 and
+	  SSSE3 instruction set support.
+	  Enables -march=core2 -mtune=core2 -mmmx,
+	  -mtune=generic depends on CONFIG_X86_GENERIC
+
+config MWESTMERE
+	bool "Intel Westmere"
+	select MMMX3DNOW
+	---help---
+
+	  Select this for the Intel Westmere platform, a CPU with
+	  64-bit extensions, MMX, SSE, SSE2, SSE3, SSSE3,
+	  SSE4.1, SSE4.2, POPCNT, AES and PCLMUL instruction set support.
+	  Enables -march=westmere  -mtune=westmere -mmmx
+	  -mtune=generic depends on CONFIG_X86_GENERIC
+
+config MNEHALEM
+	bool "Intel Core 1st Gen"
+	select MMMX3DNOW
+	---help---
+
+	  Select this for the Intel Nehalem platform; they include
+	  Core i3, i5, i7, Xeon: 34xx, 35xx, 55xx, 56xx, 75xx processors,
+	  CPUs with 64-bit extensions, MMX, SSE, SSE2, SSE3, SSSE3,
+	  SSE4.1, SSE4.2 and POPCNT instruction set support.
+	  Basic Architecture for the generic Intel Core support.
+	  Enables -march=nehalem  -mtune=nehalem -mmmx 
+	  -mtune=generic depends on CONFIG_X86_GENERIC
+
+config MSANDYBRIDGE
+	bool "Intel Core 2nd Gen"
+	select MMMX3DNOW
+	---help---
+
+	  Select this for 2nd Gen Core processors including Sandy Bridge, CPUs
+	  with 64-bit extensions, MMX, SSE, SSE2, SSE3, SSSE3,
+	  SSE4.1, SSE4.2, POPCNT, AVX, AES and PCLMUL instruction set support.
+	  Enables -march=sandybridge  -mtune=sandybridge and 
+	  -mmmx -msse4 -mpclmul -mpopcnt -mavx -msse2avx
+	  -mtune=generic depends on CONFIG_X86_GENERIC
+
+config MIVYBRIDGE
+	bool "Intel Core 3rd Gen"
+	select MMMX3DNOW
+	---help---
+
+	  Select this for 3rd Gen Core processors including Ivy Bridge, CPUs
+	  with 64-bit extensions, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2,
+	  POPCNT, AVX, AES, PCLMUL, FSGSBASE, RDRND and F16C instruction set support.
+	  Enables -march=ivybridge  -mtune=ivybridge and
+	  -mmmx -msse4 -mpclmul -mpopcnt -mavx -msse2avx
+	  -mtune=generic depends on CONFIG_X86_GENERIC
+
+config MHASWELL
+	bool "Intel Core 4th Gen"
+	select MMMX3DNOW
+	---help---
+
+	  Select this for AVX2 enabled processors including Haswell, CPUs
+	  with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3,
+	  SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES, PCLMUL, FSGSBASE,
+	  RDRND, FMA, BMI, BMI2 and F16C instruction set support.
+	  Enables -march=haswell  -mtune=haswell
+	  and -mcx16 -msahf -mpopcnt -mpclmul -mf16c -mfma -msse4 -msse2avx -mavx -mavx2 -mbmi2
+	  -mtune=generic depends on CONFIG_X86_GENERIC
+
+config MBROADWELL
+	bool "Intel Core 5th Gen"
+	select MHARDFLOAT
+	---help---
+
+	  Select this for AVX2 enabled processors including Broadwell, CPUs
+	  with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3,
+	  SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES, PCLMUL, FSGSBASE,
+	  RDRND, FMA, BMI, BMI2, F16C, RDSEED,
+	  ADCX and PREFETCHW instruction set support.
+	  Enables -march=broadwell -mtune=broadwell 
+	  and -mcx16 -msahf -mpopcnt -mpclmul -mf16c -mfma -msse4 -msse2avx -mavx -mavx2 -mbmi2
+	  -mtune=generic depends on CONFIG_X86_GENERIC
+	  
 
 config GENERIC_CPU
 	bool "Generic-x86-64"
@@ -276,6 +653,19 @@
 	  Generic x86-64 CPU.
 	  Run equally well on all x86-64 CPUs.
 
+config MNATIVE
+	bool "Native optimizations autodetected by GCC"
+	---help---
+
+	  GCC 4.2 and above support -march=native, which automatically detects
+	  the optimum settings to use based on your processor. -march=native
+	  also detects and applies additional settings beyond -march specific
+	  to your CPU, (eg. -msse4). Unless you have a specific reason not to
+	  (e.g. distcc cross-compiling), you should probably be using
+	  -march=native rather than anything listed below.
+	  Enables -march=native -mtune=native,
+	  -mtune=generic depends on CONFIG_X86_GENERIC
+
 endchoice
 
 config X86_GENERIC
@@ -290,8 +680,43 @@
 	  This is really intended for distributors who need more
 	  generic optimizations.
 
-#
 # Define implied options from the CPU selection here
+config MHARDFLOAT
+	bool "Generic Hardware Floating Point Support "
+	depends on X86_32 || X86_64
+	---help---
+	  
+	  Select this to enable generic hardware floating point support
+	  for your kernel. This will choose, depending on the architecture,
+	  that all floating point instructions are done by the generic 
+	  i387 FloatingPoint Unit (FPU) in 64 bit or 80 bit size, 
+	  or by AVX/AVX2 instructions up to 256 bit. 
+	  Enables -mhard-float 
+
+config MMMX3DNOW
+	bool "Enable MMX Multi-Media eXtensions support"
+	depends on (X86_32 || X86_64) && !( MWINCHIPC6 || MCYRIXIII || MELAN || MK6 || M586TSC || M586 || M486 || MVIAC3_2 || MGEODEGX1)
+	select MHARDFLOAT
+	---help---
+	  
+	  Select this to enable generic hardware floating point support
+	  with the MMX extensions for your kernel. 
+	  Enables for Intel architectures:  -mhard-float -mmmx 
+	  for AMD architectures: -mhard-float -mmmx  -m3dnow
+
+config MMODULEXT
+	bool "Enable special extensions support for Kernel Module compilation"
+	depends on X86_32 || X86_64
+	select MMMX3DNOW
+	---help---
+	  
+	  Select this to enable special extensions support
+	  for kernel module compilation. This will make some modules
+	  running faster than with the same compiler settings as for the kernel binary.
+	  Enables -mhard-float -mmmx , and -m3dnow if AMD architecture ,
+	  according instruction set:  -mfpmath=sse  ( -msse | -msse2 -m96bit-long-double | 
+	  -msse3 -m128bit-long-double | -mssse3 | -msse4a | -msse4 )
+
 config X86_INTERNODE_CACHE_SHIFT
 	int
 	default "12" if X86_VSMP
@@ -299,10 +724,10 @@
 
 config X86_L1_CACHE_SHIFT
 	int
-	default "7" if MPENTIUM4 || MPSC
-	default "6" if MK7 || MK8 || MPENTIUMM || MCORE2 || MATOM || MVIAC7 || X86_GENERIC || GENERIC_CPU
+	default "7" if MPENTIUM4 ||  MPSC  || MNOCONA
+	default "6" if MK7 || MK8 || MK8SSE3 || MK10 || MBARCELONA || MK14 || MK16 || MK15 || MK15II || MK15III || MK18 || MPENTIUMM || MPRESCOTT || MCORE2 || MWESTMERE || MNEHALEM || MSANDYBRIDGE || MIVYBRIDGE || MHASWELL || MBROADWELL || MATOM || MBONNELL || MSILVERMONT || MVIAC7 || X86_GENERIC || MNATIVE || GENERIC_CPU || MSSE2 || MSSE3 || MSSSE3 || MSSE412 || MSSE4A || MAVX || MAVX2 
 	default "4" if MELAN || M486 || MGEODEGX1
-	default "5" if MWINCHIP3D || MWINCHIPC6 || MCRUSOE || MEFFICEON || MCYRIXIII || MK6 || MPENTIUMIII || MPENTIUMII || M686 || M586MMX || M586TSC || M586 || MVIAC3_2 || MGEODE_LX
+	default "5" if MWINCHIP3D || MWINCHIPC6 || MCRUSOE || MEFFICEON || MCYRIXIII || MK6 || MPENTIUMIII || MPENTIUMII || M686 || MSSE || M586MMX || M586TSC || M586 || MVIAC3_2 || MGEODE_LX
 
 config X86_PPRO_FENCE
 	bool "PentiumPro memory ordering errata workaround"
@@ -313,7 +738,6 @@
 	  Enabling this option will attempt to work around some (but not all)
 	  occurrences of this problem, at the cost of much heavier spinlock and
 	  memory barrier operations.
-
 	  If unsure, say n here. Even distro kernels should think twice before
 	  enabling this: there are few systems, and an unlikely bug.
 
@@ -331,15 +755,15 @@
 
 config X86_INTEL_USERCOPY
 	def_bool y
-	depends on MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M586MMX || X86_GENERIC || MK8 || MK7 || MEFFICEON || MCORE2
+	depends on MPENTIUM4 || MPENTIUMM || MPRESCOTT || MNOCONA || MPENTIUMIII || MPENTIUMII || M586MMX || MNATIVE || X86_GENERIC || MK8 || MK8SSE3 || MK7 || MK10 || MBARCELONA || MK14 || MK16 || MK15 || MK15II || MK15III || MK18 ||  MEFFICEON || MCORE2 || MWESTMERE || MNEHALEM || MSANDYBRIDGE || MIVYBRIDGE || MHASWELL || MBROADWELL || MSSE || MSSE2 || MSSE3 || MSSSE3 || MSSE412 || MSSE4A || MAVX || MAVX2
 
 config X86_USE_PPRO_CHECKSUM
 	def_bool y
-	depends on MWINCHIP3D || MWINCHIPC6 || MCYRIXIII || MK7 || MK6 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || MK8 || MVIAC3_2 || MVIAC7 || MEFFICEON || MGEODE_LX || MCORE2 || MATOM
+	depends on MWINCHIP3D || MWINCHIPC6 || MCYRIXIII || MK7 || MK6 || MK10 || MPRESCOTT || MNOCONA || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || MK8 || MK8SSE3 || MVIAC3_2 || MVIAC7 || MEFFICEON || MGEODE_LX || MCORE2 || MWESTMERE || MNEHALEM || MSANDYBRIDGE || MIVYBRIDGE || MHASWELL || MBROADWELL || MATOM || MBONNELL || MSILVERMONT || MNATIVE || MSSE || MSSE2 || MSSE3 || MSSSE3 || MSSE412 || MSSE4A || MAVX || MAVX2
 
 config X86_USE_3DNOW
 	def_bool y
-	depends on (MCYRIXIII || MK7 || MGEODE_LX) && !UML
+	depends on (MCYRIXIII || MK7 || MK8 || MK8SSE3 || MGEODE_LX || MK10 || MBARCELONA || MK14 || MK16 || MK15 || MK15II || MK15III || MK18) && !UML
 
 #
 # P6_NOPs are a relatively minor optimization that require a family >=
@@ -355,22 +779,22 @@
 config X86_P6_NOP
 	def_bool y
 	depends on X86_64
-	depends on (MCORE2 || MPENTIUM4 || MPSC)
+	depends on (MCORE2 || MWESTMERE || MNEHALEM || MSANDYBRIDGE || MIVYBRIDGE || MHASWELL||  MNOCONA || MPENTIUM4 || MPSC)
 
 config X86_TSC
 	def_bool y
-	depends on (MWINCHIP3D || MCRUSOE || MEFFICEON || MCYRIXIII || MK7 || MK6 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || M586MMX || M586TSC || MK8 || MVIAC3_2 || MVIAC7 || MGEODEGX1 || MGEODE_LX || MCORE2 || MATOM) || X86_64
+	depends on ((MWINCHIP3D || MCRUSOE || MEFFICEON || MCYRIXIII || MK7 || MK6 || MPRESCOTT || MNOCONA || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || M586MMX || M586TSC || MK8 || MK8SSE3 || MVIAC3_2 || MVIAC7 || MGEODEGX1 || MGEODE_LX || MCORE2 || MWESTMERE || MNEHALEM || MSANDYBRIDGE || MIVYBRIDGE || MHASWELL || MBROADWELL || MATOM || MBONNELL || MSILVERMONT) && !X86_NUMAQ) || X86_64
 
 config X86_CMPXCHG64
 	def_bool y
-	depends on X86_PAE || X86_64 || MCORE2 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || MATOM
+	depends on X86_PAE || X86_64 || MCORE2 || MWESTMERE || MNEHALEM || MSANDYBRIDGE || MIVYBRIDGE || MHASWELL || MBROADWELL || MATOM || MBONNELL || MSILVERMONT ||  MPRESCOTT || MNOCONA ||MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686
 
 # this should be set for all -march=.. options where the compiler
 # generates cmov.
 config X86_CMOV
 	def_bool y
-	depends on (MK8 || MK7 || MCORE2 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || MVIAC3_2 || MVIAC7 || MCRUSOE || MEFFICEON || X86_64 || MATOM || MGEODE_LX)
-
+	depends on (MK8 || MK7  || MCORE2 || MPSC || MWESTMERE || MNEHALEM || MSANDYBRIDGE || MIVYBRIDGE || MHASWELL || MBROADWELL || MATOM || MBONNELL || MSILVERMONT || MPRESCOTT || MNOCONA || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || MVIAC3_2 || MVIAC7 || MCRUSOE || MEFFICEON || X86_64 || MGEODE_LX)
+ 
 config X86_MINIMUM_CPU_FAMILY
 	int
 	default "64" if X86_64
@@ -378,6 +802,13 @@
 	default "5" if X86_32 && X86_CMPXCHG64
 	default "4"
 
+config X86_STACK_BOUNDARY
+	int
+	default "4" if X86_64 || (X86_32 && (MK8SSE3 || MK10 || MBARCELONA || MK14 || MK16 || MK15 || MK15II || MK15III || MK18 ||  MCORE2 || MWESTMERE || MNEHALEM || MSANDYBRIDGE || MIVYBRIDGE || MHASWELL || MBROADWELL || MSSE3 || MSSSE3 || MSSE412 || MSSE4A || MAVX || MAVX2))
+	default "3" if X86_32 && (MPENTIUMM || MPENTIUM4 || MK8 || MSSE2)
+	default "2" if X86_32 
+	default "2"
+
 config X86_DEBUGCTLMSR
 	def_bool y
 	depends on !(MK6 || MWINCHIPC6 || MWINCHIP3D || MCYRIXIII || M586MMX || M586TSC || M586 || M486) && !UML
diff -uNr linux-3.14/arch/x86/Makefile linux-3.14.10-yainit/arch/x86/Makefile
--- linux-3.14/arch/x86/Makefile	2014-03-31 03:40:15.000000000 +0000
+++ linux-3.14.10-yainit/arch/x86/Makefile	2014-07-02 19:06:45.834730687 +0000
@@ -50,18 +50,27 @@
         biarch := $(call cc-option,-m32)
         KBUILD_AFLAGS += $(biarch)
         KBUILD_CFLAGS += $(biarch)
-
-        KBUILD_CFLAGS += -msoft-float -mregparm=3 -freg-struct-return
-
+        KBUILD_CFLAGS += -mregparm=3 -freg-struct-return
+ifeq ($(CONFIG_MHARDFLOAT),y)
+        KBUILD_CFLAGS += -mhard-float -mno-sse -mno-sse2 -mno-sse3 -mno-ssse3 -mno-sse4 -mno-sse4a
+else
+        KBUILD_CFLAGS += -msoft-float -mno-sse -mno-sse2 -mno-sse3 -mno-ssse3 -mno-sse4 -mno-sse4a 
+endif
+ifeq ($(CONFIG_MMMX3DNOW),y)
+        KBUILD_CFLAGS += -mmmx  
+ifeq ($(CONFIG_X86_USE_3DNOW),y)
+        KBUILD_CFLAGS += -m3dnow  
+endif
+else
         # Don't autogenerate MMX or SSE instructions
         KBUILD_CFLAGS += -mno-mmx -mno-sse
-
+endif
         # Never want PIC in a 32-bit kernel, prevent breakage with GCC built
         # with nonstandard options
         KBUILD_CFLAGS += -fno-pic
 
         # prevent gcc from keeping the stack 16 byte aligned
-        KBUILD_CFLAGS += $(call cc-option,-mpreferred-stack-boundary=2)
+        KBUILD_CFLAGS += $(call cc-option,-mpreferred-stack-boundary=$(CONFIG_X86_STACK_BOUNDARY))
 
         # Disable unit-at-a-time mode on pre-gcc-4.0 compilers, it makes gcc use
         # a lot more stack due to the lack of sharing of stacklots:
@@ -71,10 +80,9 @@
         # CPU-specific tuning. Anything which can be shared with UML should go here.
         include $(srctree)/arch/x86/Makefile_32.cpu
         KBUILD_CFLAGS += $(cflags-y)
-
+        #KBUILD_CFLAGS_MODULE += $(mflags-y)
         # temporary until string.h is fixed
-        KBUILD_CFLAGS += -ffreestanding
-else
+else  # if CONFIG_X86_32
         BITS := 64
         UTS_MACHINE := x86_64
         CHECKFLAGS += -D__x86_64__ -m64
@@ -83,37 +91,113 @@
         KBUILD_AFLAGS += -m64
         KBUILD_CFLAGS += -m64
 
-        # Don't autogenerate traditional x87, MMX or SSE instructions
-        KBUILD_CFLAGS += -mno-mmx -mno-sse
+ifeq ($(CONFIG_MHARDFLOAT),y)
+        KBUILD_CFLAGS += -mhard-float -mno-sse -mno-sse2 -mno-sse3 -mno-ssse3 -mno-sse4 -mno-sse4a
+else
+        KBUILD_CFLAGS += -msoft-float -mno-sse -mno-sse2 -mno-sse3 -mno-ssse3 -mno-sse4 -mno-sse4a
+endif
+ifeq ($(CONFIG_MMMX3DNOW),y)
+        KBUILD_CFLAGS += -mmmx  
+ifeq ($(CONFIG_X86_USE_3DNOW),y)
+        KBUILD_CFLAGS += -m3dnow  
+endif
+else
+         # Don't autogenerate MMX or SSE instructions
+         KBUILD_CFLAGS += -mno-mmx -mno-sse
+endif
         KBUILD_CFLAGS += $(call cc-option,-mno-80387)
         KBUILD_CFLAGS += $(call cc-option,-mno-fp-ret-in-387)
 
 	# Use -mpreferred-stack-boundary=3 if supported.
-	KBUILD_CFLAGS += $(call cc-option,-mpreferred-stack-boundary=3)
-
-        # FIXME - should be integrated in Makefile.cpu (Makefile_32.cpu)
-        cflags-$(CONFIG_MK8) += $(call cc-option,-march=k8)
-        cflags-$(CONFIG_MPSC) += $(call cc-option,-march=nocona)
-
-        cflags-$(CONFIG_MCORE2) += \
-                $(call cc-option,-march=core2,$(call cc-option,-mtune=generic))
-	cflags-$(CONFIG_MATOM) += $(call cc-option,-march=atom) \
-		$(call cc-option,-mtune=atom,$(call cc-option,-mtune=generic))
-        cflags-$(CONFIG_GENERIC_CPU) += $(call cc-option,-mtune=generic)
-        KBUILD_CFLAGS += $(cflags-y)
-
-        KBUILD_CFLAGS += -mno-red-zone
-        KBUILD_CFLAGS += -mcmodel=kernel
-
-        # -funit-at-a-time shrinks the kernel .text considerably
-        # unfortunately it makes reading oopses harder.
-        KBUILD_CFLAGS += $(call cc-option,-funit-at-a-time)
-
-        # this works around some issues with generating unwind tables in older gccs
-        # newer gccs do it by default
-        KBUILD_CFLAGS += $(call cc-option,-maccumulate-outgoing-args)
+ 	# Use -mpreferred-stack-boundary=3 if supported.
+cflags-$(CONFIG_MSSE3)		+= -march=i686 $(call tune,prescott)
+modflags-$(CONFIG_MSSE3)		+=  -Wa,-msse-check=warning -msse -msse2 -msse3 -m128bit-long-double -mfpmath=sse 
+archflags-$(CONFIG_MSSE3)		+= -march=i686 -mtune=generic -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MSSSE3)		+= -march=i686 $(call tune,core2)
+modflags-$(CONFIG_MSSSE3)		+=  -msse -msse2 -msse3 -mssse3 -m128bit-long-double -mfpmath=sse 
+archflags-$(CONFIG_MSSSE3)		+= -march=i686 -mtune=generic -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MSSE412)		+= -march=i686 $(call cc-option,-mtune=nehalem,$(call cc-option,-mtune=core2))
+modflags-$(CONFIG_MSSE412)		+= -msse -msse2 -msse3 -msse4 -m128bit-long-double -mfpmath=sse
+archflags-$(CONFIG_MSSE412)		+= -march=i686 -mtune=generic -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MSSE4A)		+= -march=athlon $(call cc-option,-mtune=amdfam10,$(call cc-option,-mtune=athlon))
+modflags-$(CONFIG_MSSE4A)		+= -msse -msse2 -msse3 -msse4a -m128bit-long-double -mfpmath=sse
+cflags-$(CONFIG_MAVX)		+= -march=i686 $(call cc-option,-mtune=sandybridge,$(call cc-option,-mtune=core2)) -msse4 m128bit-long-double -mpclmul -mpopcnt -mavx -msse2avx 
+archflags-$(CONFIG_MAVX)		+= -march=i686 -mtune=generic -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MAVX2)		+= -march=i686 $(call cc-option,-mtune=haswell,$(call cc-option,-mtune=core2)) -msse4 -m128bit-long-double -mpclmul -mpopcnt -mbmi -mfma  -mavx -mavx2 -msse2avx 
+archflags-$(CONFIG_MAVX2)		+= -march=i686 -mtune=generic -mpreferred-stack-boundary=4
+
+cflags-$(CONFIG_MNATIVE) += $(call cc-option,-march=native)  $(call cc-option,-mtune=native)
+cflags-$(CONFIG_MK8)		+= $(call cc-option,-march=k8,-march=athlon) $(call cc-option,-mtune=k8,-mtune=athlon)
+archflags-$(CONFIG_MK8)		+= $(call cc-option,-march=k8,-march=athlon) -mtune=generic -mpreferred-stack-boundary=3
+modflags-$(CONFIG_MK8)	+= -Wa,-msse-check=warning -msse -msse2 -m96bit-long-double -mfpmath=sse 
+cflags-$(CONFIG_MK8SSE3)		+= $(call cc-option,-march=k8-sse3,-march=athlon) $(call cc-option,-mtune=k8-sse3,-mtune=athlon)
+archflags-$(CONFIG_MK8SSE3)		+= $(call cc-option,-march=k8-sse3,-march=athlon) -mtune=generic  -mpreferred-stack-boundary=4
+modflags-$(CONFIG_MK8SSE3)		+=  -Wa,-msse-check=warning -msse -msse2 -msse3 -m128bit-long-double -mfpmath=sse 
+cflags-$(CONFIG_MK10)	+= $(call cc-option,-march=amdfam10,-march=athlon) $(call cc-option,-mtune=amdfam10,-mtune=athlon)
+archflags-$(CONFIG_MK10)	+= $(call cc-option,-march=amdfam10,-march=athlon) -mtune=generic -mpreferred-stack-boundary=4
+modflags-$(CONFIG_MK10)		+= -msse -msse2 -msse3 -msse4a  -m128bit-long-double -mfpmath=sse
+cflags-$(CONFIG_MBARCELONA)	+= $(call cc-option,-march=barcelona,-march=athlon) $(call cc-option,-mtune=barcelona,-mtune=athlon)
+archflags-$(CONFIG_MBARCELONA)	+= $(call cc-option,-march=barcelona,-march=athlon) -mtune=generic -mpreferred-stack-boundary=4
+archflags-$(CONFIG_MK14)	+= $(call cc-option,-march=btver1,-march=athlon) -mtune=generic -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MK14)	+= $(call cc-option,-march=btver1,-march=athlon) $(call cc-option,-mtune=btver1,-mtune=athlon)
+cflags-$(CONFIG_MK16)	+= $(call cc-option,-march=btver2,-march=athlon) $(call cc-option,-mtune=btver2,-mtune=athlon)
+archflags-$(CONFIG_MK16)	+= $(call cc-option,-march=btver2,-march=athlon) -mtune=generic -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MK15)	+= $(call cc-option,-march=bdver1,-march=athlon) $(call cc-option,-mtune=bdver1,-mtune=athlon) -mcx16 -msahf -msse4 -msse4a -m128bit-long-double -mpclmul -mpopcnt -mavx -msse2avx
+archflags-$(CONFIG_MK15)	+= $(call cc-option,-march=bdver1,-march=athlon) -mtune=generic  -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MK15II)	+= $(call cc-option,-march=bdver2,-march=athlon) $(call cc-option,-mtune=bdver2,-mtune=athlon)  -mcx16 -msahf -msse4 -msse4a -m128bit-long-double -mpclmul -mpopcnt -mavx -msse2avx
+archflags-$(CONFIG_MK15II)	+= $(call cc-option,-march=bdver2,-march=athlon) -mtune=generic  -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MK15III)	+= $(call cc-option,-march=bdver3,-march=athlon) $(call cc-option,-mtune=bdver3,-mtune=athlon)  -mcx16 -msahf -msse4 -msse4a -m128bit-long-double -mpclmul -mpopcnt -mavx -msse2avx
+archflags-$(CONFIG_MK15III)	+= $(call cc-option,-march=bdver3,-march=athlon) -mtune=generic  -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MK18)	+= $(call cc-option,-march=bdver4,-march=athlon) $(call cc-option,-mtune=bdver4,-mtune=athlon) -msse4 -msse4a -m128bit-long-double -mpclmul -mpopcnt -mf16c -mbmi -mfma  -mavx -mavx2 -msse2avx 
+archflags-$(CONFIG_MK18)	+= $(call cc-option,-march=bdver4,-march=athlon) -mtune=generic  -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MNOCONA)		+= -march=nocona $(call tune,nocona)
+archflags-$(CONFIG_MPRESCOTT)		+= -march=prescott  -mtune=generic -mpreferred-stack-boundary=4
+archflags-$(CONFIG_MNOCONA)		+= -march=nocona -mtune=generic -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MCORE2)		+= $(call cc-option,-march=core2,-march=nocona) $(call cc-option,-mtune=core2,-mtune=nocona)
+modflags-$(CONFIG_MCORE2)		+= -msse -msse2 -msse3 -mssse3 -m128bit-long-double 
+archflags-$(CONFIG_MCORE2)		+= $(call cc-option,-march=core2,-march=nocona) -mtune=generic -mno-movbe -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MWESTMERE)	+= $(call cc-option,-march=westmere,-march=core2) $(call cc-option,-mtune=westmere,-mtune=core2)
+archflags-$(CONFIG_MWESTMERE)	+= $(call cc-option,-march=westmere,-march=core2) $(call cc-option,-mtune=westmere,-mtune=core2)
+modflags-$(CONFIG_MWESTMERE)		+= -msse -msse2 -msse3  -msse4 -m128bit-long-double 
+cflags-$(CONFIG_MNEHALEM)	+= $(call cc-option,-march=nehalem,-march=core2) $(call cc-option,-mtune=nehalem,-mtune=core2)
+archflags-$(CONFIG_MNEHALEM)	+= $(call cc-option,-march=nehalem,-march=core2) -mtune=generic -mpreferred-stack-boundary=4
+modflags-$(CONFIG_MNEHALEM)		+= -msse -msse2 -msse3 -msse4 -m128bit-long-double 
+cflags-$(CONFIG_MSANDYBRIDGE)	+= $(call cc-option,-march=sandybridge,-march=core2) $(call cc-option,-mtune=sandybridge,-mtune=core2)  -msse4 -m128bit-long-double -mpclmul -mpopcnt -mavx -msse2avx 
+cflags-$(CONFIG_MSANDYBRIDGE)	+= $(call cc-option,-march=sandybridge,-march=core2) -mtune=generic -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MIVYBRIDGE)	+= $(call cc-option,-march=ivybridge,-march=core2) $(call cc-option,-mtune=ivybridge,-mtune=core2)  -msse4 -m128bit-long-double -mpclmul -mpopcnt -mavx -msse2avx 
+archflags-$(CONFIG_MIVYBRIDGE)	+= $(call cc-option,-march=ivybridge,-march=core2) -mtune=generic -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MHASWELL)	+= $(call cc-option,-march=haswell,-march=core2) $(call cc-option,-mtune=haswell,-mtune=core2) -msse4 -m128bit-long-double -mpclmul -mpopcnt -mbmi -mfma  -mavx -mavx2 -msse2avx 
+archflags-$(CONFIG_MHASWELL)	+= $(call cc-option,-march=haswell,-march=core2) -mtune=generic -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MBROADWELL)	+= $(call cc-option,-march=nehalem,-march=core2) $(call cc-option,-mtune=nehalem,-mtune=core2) -msse4 -m128bit-long-double -mpclmul -mpopcnt -mbmi -mfma  -mavx -mavx2 -msse2avx 
+archflags-$(CONFIG_MBROADWELL)	+= $(call cc-option,-march=nehalem,-march=core2) -mtune=generic -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MATOM)		+=  $(call cc-option,-march=atom,-march=i686) $(call cc-option,-mtune=atom,$(call cc-option,-mtune=core2,-mtune=generic))
+cflags-$(CONFIG_MBONNELL)	+= $(call cc-option,-march=bonnell,-march=i686) $(call cc-option,-mtune=bonnell,$(call cc-option,-mtune=core2,-mtune=generic))
+cflags-$(CONFIG_MSILVERMONT)	+= $(call cc-option,-march=silvermont,-march=i686) $(call cc-option,-mtune=silvermont,$(call cc-option,-mtune=core2,-mtune=generic))
+archflags-$(CONFIG_MATOM)		+=  $(call cc-option,-march=atom,-march=i686) -mtune=generic -mno-movbe -mpreferred-stack-boundary=4
+archflags-$(CONFIG_MBONNELL)	+= $(call cc-option,-march=bonnell,-march=i686) -mtune=generic -mno-movbe -mpreferred-stack-boundary=4
+archflags-$(CONFIG_MSILVERMONT)	+= $(call cc-option,-march=silvermont,-march=i686) -mtune=generic -mno-movbe -mpreferred-stack-boundary=4
+modflags-$(CONFIG_MATOM)		+=  -msse -msse2 -msse3 -mssse3 -m128bit-long-double 
+modflags-$(CONFIG_MBONNELL)	+= -msse -msse2 -msse3 -mssse3 -m128bit-long-double 
+modflags-$(CONFIG_MSILVERMONT)	+= -msse -msse2 -msse3 -mssse3 -m128bit-long-double 
+				 cflags-$(CONFIG_GENERIC_CPU) += $(call cc-option,-mtune=generic)
+				
+				KBUILD_CFLAGS += $(cflags-y)
+        KBUILD_CFLAGS_MODULE += $(mflags-y)
+ 
+				KBUILD_CFLAGS += -mno-red-zone
+				KBUILD_CFLAGS += -mcmodel=kernel
+	
+				# -funit-at-a-time shrinks the kernel .text considerably
+				# unfortunately it makes reading oopses harder.
+				KBUILD_CFLAGS += $(call cc-option,-funit-at-a-time)
+	
+				# this works around some issues with generating unwind tables in older gccs
+				# newer gccs do it by default
+				KBUILD_CFLAGS += -maccumulate-outgoing-args 
 endif
 
+KBUILD_CFLAGS += -ffreestanding
+
 # Make sure compiler does not have buggy stack-protector support.
 ifdef CONFIG_CC_STACKPROTECTOR
 	cc_has_sp := $(srctree)/scripts/gcc-x86_$(BITS)-has-stack-protector.sh
@@ -152,6 +236,7 @@
 # is .cfi_signal_frame supported too?
 cfi-sigframe := $(call as-instr,.cfi_startproc\n.cfi_signal_frame\n.cfi_endproc,-DCONFIG_AS_CFI_SIGNAL_FRAME=1)
 cfi-sections := $(call as-instr,.cfi_sections .debug_frame,-DCONFIG_AS_CFI_SECTIONS=1)
+asinstr += $(call as-instr,crc32l %eax$(comma)%eax,-DCONFIG_AS_CRC32=1)
 
 # does binutils support specific instructions?
 asinstr := $(call as-instr,fxsaveq (%rax),-DCONFIG_AS_FXSAVEQ=1)
@@ -169,13 +254,22 @@
 # Workaround for a gcc prelease that unfortunately was shipped in a suse release
 KBUILD_CFLAGS += -Wno-sign-compare
 #
+ifneq ($(CONFIG_UNWIND_INFO),y)
 KBUILD_CFLAGS += -fno-asynchronous-unwind-tables
+endif
 # prevent gcc from generating any FP code by mistake
-KBUILD_CFLAGS += $(call cc-option,-mno-sse -mno-mmx -mno-sse2 -mno-3dnow,)
-KBUILD_CFLAGS += $(call cc-option,-mno-avx,)
-
+ifeq ($(CONFIG_MHARDFLOAT),n)
+KBUILD_CFLAGS += $(call cc-option,-mno-sse -mno-sse2 -mno-sse3 -mno-sse4 -mno-sse4a,-mno-sse )
+#KBUILD_CFLAGS += $(call cc-option,-mno-avx,)
+endif
 KBUILD_CFLAGS += $(mflags-y)
 KBUILD_AFLAGS += $(mflags-y)
+ifeq ($(CONFIG_MMODULEXT),y)
+KBUILD_CFLAGS_MODULE += $(modflags-y)
+endif
+KBUILD_AFLAGS += $(archflags,y) -v
+KBUILD_AFLAGS_MODULE += -v $(archflags,y)
+
 
 archscripts: scripts_basic
 	$(Q)$(MAKE) $(build)=arch/x86/tools relocs
@@ -271,3 +365,12 @@
   echo  '                  FDINITRD=file initrd for the booted kernel'
   echo  '  kvmconfig	- Enable additional options for guest kernel support'
 endef
+
+define OLD_LD
+
+*** ${VERSION}.${PATCHLEVEL} PaX kernels no longer build correctly with old versions of binutils.
+*** Please upgrade your binutils to 2.18 or newer
+endef
+
+archprepare:
+	$(if $(LDFLAGS_BUILD_ID),,$(error $(OLD_LD)))
diff -uNr linux-3.14/arch/x86/Makefile_32.cpu linux-3.14.10-yainit/arch/x86/Makefile_32.cpu
--- linux-3.14/arch/x86/Makefile_32.cpu	2014-03-31 03:40:15.000000000 +0000
+++ linux-3.14.10-yainit/arch/x86/Makefile_32.cpu	2014-07-02 18:49:04.531771151 +0000
@@ -11,29 +11,119 @@
 
 align := $(cc-option-align)
 cflags-$(CONFIG_M486)		+= -march=i486
+archflags-$(CONFIG_M486)		+= -march=i486 -mtune=generic
 cflags-$(CONFIG_M586)		+= -march=i586
+archflags-$(CONFIG_M586)		+= -march=i586 -mtune=generic
+cflags-$(CONFIG_MMMX)		+= -march=winchip2 -mtune=generic
+archflags-$(CONFIG_MMMX)		+= -march=winchip2 -mtune=generic
+modflags-$(CONFIG_MMMX)		+= -mmmx
+cflags-$(CONFIG_MSSE)		+= -march=i686 -mtune=generic
+archflags-$(CONFIG_MSSE)		+= -march=i686 -mtune=generic -mpreferred-stack-boundary=2
+modflags-$(CONFIG_MSSE)		+= -msse 
+cflags-$(CONFIG_MSSE2)	+= -march=i686 -mtune=generic
+archflags-$(CONFIG_MSSE2)		+= -march=i686 -mtune=generic -mpreferred-stack-boundary=3
+modflags-$(CONFIG_MSSE2)	+= -Wa,-msse-check=warning -msse -msse2 -m96bit-long-double -mfpmath=sse -mno-sse4 -mno-sse4a
+cflags-$(CONFIG_MSSE3)		+= -march=i686 $(call tune,prescott)
+modflags-$(CONFIG_MSSE3)		+=  -Wa,-msse-check=warning -msse -msse2 -msse3 -m128bit-long-double -mfpmath=sse 
+archflags-$(CONFIG_MSSE3)		+= -march=i686 -mtune=generic -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MSSSE3)		+= -march=i686 $(call tune,core2)
+modflags-$(CONFIG_MSSSE3)		+=  -msse -msse2 -msse3 -mssse3 -m128bit-long-double -mfpmath=sse 
+archflags-$(CONFIG_MSSSE3)		+= -march=i686 -mtune=generic -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MSSE412)		+= -march=i686 $(call cc-option,-mtune=nehalem,$(call cc-option,-mtune=core2))
+modflags-$(CONFIG_MSSE412)		+= -msse -msse2 -msse3 -msse4 -m128bit-long-double -mfpmath=sse
+archflags-$(CONFIG_MSSE412)		+= -march=i686 -mtune=generic -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MSSE4A)		+= -march=athlon $(call cc-option,-mtune=amdfam10,$(call cc-option,-mtune=athlon))
+modflags-$(CONFIG_MSSE4A)		+= -msse -msse2 -msse3 -msse4a -m128bit-long-double -mfpmath=sse
+cflags-$(CONFIG_MAVX)		+= -march=i686 $(call cc-option,-mtune=sandybridge,$(call cc-option,-mtune=core2)) -msse4 -m128bit-long-double -mpclmul -mpopcnt -mavx -msse2avx 
+archflags-$(CONFIG_MAVX)		+= -march=i686 -mtune=generic -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MAVX2)		+= -march=i686 $(call cc-option,-mtune=haswell,$(call cc-option,-mtune=core2)) -msse4 -m128bit-long-double -mpclmul -mpopcnt -mbmi -mfma  -mavx -mavx2 -msse2avx 
+archflags-$(CONFIG_MAVX2)		+= -march=i686 -mtune=generic -mpreferred-stack-boundary=4
+
 cflags-$(CONFIG_M586TSC)	+= -march=i586
+archflags-$(CONFIG_M586TSC)	+= -march=i586 -mtune=generic
 cflags-$(CONFIG_M586MMX)	+= -march=pentium-mmx
+archflags-$(CONFIG_M586MMX)	+= -march=pentium-mmx -mtune=generic
 cflags-$(CONFIG_M686)		+= -march=i686
+archflags-$(CONFIG_M686)		+= -march=i686 -mtune=generic
 cflags-$(CONFIG_MPENTIUMII)	+= -march=i686 $(call tune,pentium2)
-cflags-$(CONFIG_MPENTIUMIII)	+= -march=i686 $(call tune,pentium3)
-cflags-$(CONFIG_MPENTIUMM)	+= -march=i686 $(call tune,pentium3)
-cflags-$(CONFIG_MPENTIUM4)	+= -march=i686 $(call tune,pentium4)
+archflags-$(CONFIG_MPENTIUMII)	+= -march=i686 -mtune=generic
+modflags-$(CONFIG_MPENTIUMIII)		+= -msse 
+cflags-$(CONFIG_MPENTIUMIII)	+= -march=pentium3  $(call tune,pentium3)
+archflags-$(CONFIG_MPENTIUMIII)	+= -march=pentium3 -mtune=generic
+cflags-$(CONFIG_MPENTIUMM)	+= -march=pentium-m $(call tune,pentium-m) 
+archflags-$(CONFIG_MPENTIUMM)	+= -march=pentium-m -mtune=generic 
+modflags-$(CONFIG_MPENTIUMM)	+= -Wa,-msse-check=warning -msse -msse2  -m96bit-long-double -mfpmath=sse 
+cflags-$(CONFIG_MPENTIUM4)	+= -march=pentium4  $(call tune,pentium4) 
+archflags-$(CONFIG_MPENTIUM4)	+= -march=pentium4  -mtune=generic
+modflags-$(CONFIG_MPENTIUM4)	+= -Wa,-msse-check=warning  -msse -msse2  -m96bit-long-double -mfpmath=sse 
 cflags-$(CONFIG_MK6)		+= -march=k6
 # Please note, that patches that add -march=athlon-xp and friends are pointless.
 # They make zero difference whatsosever to performance at this time.
-cflags-$(CONFIG_MK7)		+= -march=athlon
-cflags-$(CONFIG_MK8)		+= $(call cc-option,-march=k8,-march=athlon)
+cflags-$(CONFIG_MK7)		+= -march=athlon $(call tune,athlon)
+archflags-$(CONFIG_MK7)		+= -march=athlon -mtune=generic
+modflags-$(CONFIG_MK7)		+= -msse 
+cflags-$(CONFIG_MNATIVE) += $(call cc-option,-march=native)  $(call cc-option,-mtune=native)
+cflags-$(CONFIG_MK8)		+= $(call cc-option,-march=k8,-march=athlon) $(call cc-option,-mtune=k8,-mtune=athlon)
+archflags-$(CONFIG_MK8)		+= $(call cc-option,-march=k8,-march=athlon) -mtune=generic -mpreferred-stack-boundary=3
+modflags-$(CONFIG_MK8)	+= -Wa,-msse-check=warning -msse -msse2 -m96bit-long-double -mfpmath=sse 
+cflags-$(CONFIG_MK8SSE3)		+= $(call cc-option,-march=k8-sse3,-march=athlon) $(call cc-option,-mtune=k8-sse3,-mtune=athlon)
+archflags-$(CONFIG_MK8SSE3)		+= $(call cc-option,-march=k8-sse3,-march=athlon) -mtune=generic  -mpreferred-stack-boundary=4
+modflags-$(CONFIG_MK8SSE3)		+=  -Wa,-msse-check=warning -msse -msse2 -msse3 -m128bit-long-double -mfpmath=sse 
+cflags-$(CONFIG_MK10)	+= $(call cc-option,-march=amdfam10,-march=athlon) $(call cc-option,-mtune=amdfam10,-mtune=athlon)
+archflags-$(CONFIG_MK10)	+= $(call cc-option,-march=amdfam10,-march=athlon) -mtune=generic -mpreferred-stack-boundary=4
+modflags-$(CONFIG_MK10)		+= -msse -msse2 -msse3 -msse4a  -m128bit-long-double -mfpmath=sse
+cflags-$(CONFIG_MBARCELONA)	+= $(call cc-option,-march=barcelona,-march=athlon) $(call cc-option,-mtune=barcelona,-mtune=athlon)
+archflags-$(CONFIG_MBARCELONA)	+= $(call cc-option,-march=barcelona,-march=athlon) -mtune=generic -mpreferred-stack-boundary=4
+archflags-$(CONFIG_MK14)	+= $(call cc-option,-march=btver1,-march=athlon) -mtune=generic -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MK14)	+= $(call cc-option,-march=btver1,-march=athlon) $(call cc-option,-mtune=btver1,-mtune=athlon)
+cflags-$(CONFIG_MK16)	+= $(call cc-option,-march=btver2,-march=athlon) $(call cc-option,-mtune=btver2,-mtune=athlon)
+archflags-$(CONFIG_MK16)	+= $(call cc-option,-march=btver2,-march=athlon) -mtune=generic -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MK15)	+= $(call cc-option,-march=bdver1,-march=athlon) $(call cc-option,-mtune=bdver1,-mtune=athlon) -mcx16 -msahf -msse4 -msse4a -m128bit-long-double -mpclmul -mpopcnt -mavx -msse2avx
+archflags-$(CONFIG_MK15)	+= $(call cc-option,-march=bdver1,-march=athlon) -mtune=generic  -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MK15II)	+= $(call cc-option,-march=bdver2,-march=athlon) $(call cc-option,-mtune=bdver2,-mtune=athlon)  -mcx16 -msahf -msse4 -msse4a -m128bit-long-double -mpclmul -mpopcnt -mavx -msse2avx
+archflags-$(CONFIG_MK15II)	+= $(call cc-option,-march=bdver2,-march=athlon) -mtune=generic  -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MK15III)	+= $(call cc-option,-march=bdver3,-march=athlon) $(call cc-option,-mtune=bdver3,-mtune=athlon)  -mcx16 -msahf -msse4 -msse4a -m128bit-long-double -mpclmul -mpopcnt -mavx -msse2avx
+archflags-$(CONFIG_MK15III)	+= $(call cc-option,-march=bdver3,-march=athlon) -mtune=generic  -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MK18)	+= $(call cc-option,-march=bdver4,-march=athlon) $(call cc-option,-mtune=bdver4,-mtune=athlon) -msse4 -msse4a -m128bit-long-double -mpclmul -mpopcnt -mf16c -mbmi -mfma  -mavx -mavx2 -msse2avx 
+archflags-$(CONFIG_MK18)	+= $(call cc-option,-march=bdver4,-march=athlon) -mtune=generic  -mpreferred-stack-boundary=4
 cflags-$(CONFIG_MCRUSOE)	+= -march=i686 $(align)-functions=0 $(align)-jumps=0 $(align)-loops=0
 cflags-$(CONFIG_MEFFICEON)	+= -march=i686 $(call tune,pentium3) $(align)-functions=0 $(align)-jumps=0 $(align)-loops=0
 cflags-$(CONFIG_MWINCHIPC6)	+= $(call cc-option,-march=winchip-c6,-march=i586)
 cflags-$(CONFIG_MWINCHIP3D)	+= $(call cc-option,-march=winchip2,-march=i586)
+archflags-$(CONFIG_MWINCHIP3D)	+= $(call cc-option,-march=winchip2,-march=i586) -mtune=generic
 cflags-$(CONFIG_MCYRIXIII)	+= $(call cc-option,-march=c3,-march=i486) $(align)-functions=0 $(align)-jumps=0 $(align)-loops=0
 cflags-$(CONFIG_MVIAC3_2)	+= $(call cc-option,-march=c3-2,-march=i686)
 cflags-$(CONFIG_MVIAC7)		+= -march=i686
-cflags-$(CONFIG_MCORE2)		+= -march=i686 $(call tune,core2)
-cflags-$(CONFIG_MATOM)		+= $(call cc-option,-march=atom,$(call cc-option,-march=core2,-march=i686)) \
-	$(call cc-option,-mtune=atom,$(call cc-option,-mtune=generic))
+cflags-$(CONFIG_MPRESCOTT)		+= -march=prescott $(call tune,prescott)
+cflags-$(CONFIG_MNOCONA)		+= -march=nocona $(call tune,nocona)
+archflags-$(CONFIG_MPRESCOTT)		+= -march=prescott  -mtune=generic -mpreferred-stack-boundary=4
+archflags-$(CONFIG_MNOCONA)		+= -march=nocona -mtune=generic -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MCORE2)		+= $(call cc-option,-march=core2,-march=nocona) $(call cc-option,-mtune=core2,-mtune=nocona)
+modflags-$(CONFIG_MCORE2)		+= -msse -msse2 -msse3 -mssse3 -m128bit-long-double 
+archflags-$(CONFIG_MCORE2)		+= $(call cc-option,-march=core2,-march=nocona) -mtune=generic -mno-movbe -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MWESTMERE)	+= $(call cc-option,-march=westmere,-march=core2) $(call cc-option,-mtune=westmere,-mtune=core2)
+archflags-$(CONFIG_MWESTMERE)	+= $(call cc-option,-march=westmere,-march=core2) $(call cc-option,-mtune=westmere,-mtune=core2)
+modflags-$(CONFIG_MWESTMERE)		+= -msse -msse2 -msse3  -msse4 -m128bit-long-double 
+cflags-$(CONFIG_MNEHALEM)	+= $(call cc-option,-march=nehalem,-march=core2) $(call cc-option,-mtune=nehalem,-mtune=core2)
+archflags-$(CONFIG_MNEHALEM)	+= $(call cc-option,-march=nehalem,-march=core2) -mtune=generic -mpreferred-stack-boundary=4
+modflags-$(CONFIG_MNEHALEM)		+= -msse -msse2 -msse3 -msse4 -m128bit-long-double 
+cflags-$(CONFIG_MSANDYBRIDGE)	+= $(call cc-option,-march=sandybridge,-march=core2) $(call cc-option,-mtune=sandybridge,-mtune=core2)  -msse4 -m128bit-long-double -mpclmul -mpopcnt -mavx -msse2avx 
+cflags-$(CONFIG_MSANDYBRIDGE)	+= $(call cc-option,-march=sandybridge,-march=core2) -mtune=generic -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MIVYBRIDGE)	+= $(call cc-option,-march=ivybridge,-march=core2) $(call cc-option,-mtune=ivybridge,-mtune=core2)  -msse4 -m128bit-long-double -mpclmul -mpopcnt -mavx -msse2avx 
+archflags-$(CONFIG_MIVYBRIDGE)	+= $(call cc-option,-march=ivybridge,-march=core2) -mtune=generic -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MHASWELL)	+= $(call cc-option,-march=haswell,-march=core2) $(call cc-option,-mtune=haswell,-mtune=core2) -msse4 -m128bit-long-double -mpclmul -mpopcnt -mbmi -mfma  -mavx -mavx2 -msse2avx 
+archflags-$(CONFIG_MHASWELL)	+= $(call cc-option,-march=haswell,-march=core2) -mtune=generic -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MBROADWELL)	+= $(call cc-option,-march=nehalem,-march=core2) $(call cc-option,-mtune=nehalem,-mtune=core2) -msse4 -m128bit-long-double -mpclmul -mpopcnt -mbmi -mfma  -mavx -mavx2 -msse2avx 
+archflags-$(CONFIG_MBROADWELL)	+= $(call cc-option,-march=nehalem,-march=core2) -mtune=generic -mpreferred-stack-boundary=4
+cflags-$(CONFIG_MATOM)		+=  $(call cc-option,-march=atom,-march=i686) $(call cc-option,-mtune=atom,$(call cc-option,-mtune=core2,-mtune=generic))
+cflags-$(CONFIG_MBONNELL)	+= $(call cc-option,-march=bonnell,-march=i686) $(call cc-option,-mtune=bonnell,$(call cc-option,-mtune=core2,-mtune=generic))
+cflags-$(CONFIG_MSILVERMONT)	+= $(call cc-option,-march=silvermont,-march=i686) $(call cc-option,-mtune=silvermont,$(call cc-option,-mtune=core2,-mtune=generic))
+archflags-$(CONFIG_MATOM)		+=  $(call cc-option,-march=atom,-march=i686) -mtune=generic -mno-movbe -mpreferred-stack-boundary=4
+archflags-$(CONFIG_MBONNELL)	+= $(call cc-option,-march=bonnell,-march=i686) -mtune=generic -mno-movbe -mpreferred-stack-boundary=4
+archflags-$(CONFIG_MSILVERMONT)	+= $(call cc-option,-march=silvermont,-march=i686) -mtune=generic -mno-movbe -mpreferred-stack-boundary=4
+modflags-$(CONFIG_MATOM)		+=  -msse -msse2 -msse3 -mssse3 -m128bit-long-double 
+modflags-$(CONFIG_MBONNELL)	+= -msse -msse2 -msse3 -mssse3 -m128bit-long-double 
+modflags-$(CONFIG_MSILVERMONT)	+= -msse -msse2 -msse3 -mssse3 -m128bit-long-double 
 
 # AMD Elan support
 cflags-$(CONFIG_MELAN)		+= -march=i486
diff -uNr linux-3.14/arch/x86/include/asm/module.h linux-3.14-xconfig/arch/x86/include/asm/module.h
--- linux-3.14/arch/x86/include/asm/module.h	2014-03-31 03:40:15.000000000 +0000
+++ linux-3.14-xconfig/arch/x86/include/asm/module.h	2014-06-25 19:30:46.316112555 +0000
@@ -9,14 +9,54 @@
 #define MODULE_PROC_FAMILY "486 "
 #elif defined CONFIG_M586
 #define MODULE_PROC_FAMILY "586 "
-#elif defined CONFIG_M586TSC
+#elif defined CONFIG_MMMX
+#define MODULE_PROC_FAMILY "MMX "
+#elif defined CONFIG_MSSE
+#define MODULE_PROC_FAMILY "SSE "
+#elif defined CONFIG_MSSE2
+#define MODULE_PROC_FAMILY "SSE2 "
+#elif defined CONFIG_MSSE3
+#define MODULE_PROC_FAMILY "SSE3 "
+#elif defined CONFIG_MSSSE3
+#define MODULE_PROC_FAMILY "SSSE3 "
+#elif defined CONFIG_MSSE4A
+#define MODULE_PROC_FAMILY "SSE4A "
+#elif defined CONFIG_MSSE412
+#define MODULE_PROC_FAMILY "SSE412 "
+#elif defined CONFIG_MAVX
+#define MODULE_PROC_FAMILY "AVX "
+#elif defined CONFIG_MAVX2
+#define MODULE_PROC_FAMILY "AVX2 "
+#elif defined CONFIG_M586
 #define MODULE_PROC_FAMILY "586TSC "
 #elif defined CONFIG_M586MMX
 #define MODULE_PROC_FAMILY "586MMX "
+#elif defined CONFIG_MPRESCOTT
+#define MODULE_PROC_FAMILY "PRESCOTT "
+#elif defined CONFIG_MNOCONA
+#define MODULE_PROC_FAMILY "NOCONA "
 #elif defined CONFIG_MCORE2
 #define MODULE_PROC_FAMILY "CORE2 "
+#elif defined CONFIG_MNATIVE
+#define MODULE_PROC_FAMILY "NATIVE "
+#elif defined CONFIG_MWESTMERE
+#define MODULE_PROC_FAMILY "WESTMERE "
+#elif defined CONFIG_MNEHALEM
+#define MODULE_PROC_FAMILY "NEHALEM "
+#elif defined CONFIG_MSANDYBRIDGE
+#define MODULE_PROC_FAMILY "SANDYBRIDGE "
+#elif defined CONFIG_MIVYBRIDGE
+#define MODULE_PROC_FAMILY "IVYBRIDGE "
+#elif defined CONFIG_MHASWELL
+#define MODULE_PROC_FAMILY "HASWELL "
+#elif defined CONFIG_MBROADWELL
+#define MODULE_PROC_FAMILY "BROADWELL "
 #elif defined CONFIG_MATOM
 #define MODULE_PROC_FAMILY "ATOM "
+#elif defined CONFIG_MBONNELL
+#define MODULE_PROC_FAMILY "BONNELL "
+#elif defined CONFIG_MSILVERMONT
+#define MODULE_PROC_FAMILY "SILVERMONT "
 #elif defined CONFIG_M686
 #define MODULE_PROC_FAMILY "686 "
 #elif defined CONFIG_MPENTIUMII
@@ -31,8 +71,26 @@
 #define MODULE_PROC_FAMILY "K6 "
 #elif defined CONFIG_MK7
 #define MODULE_PROC_FAMILY "K7 "
+#elif defined CONFIG_MK8SSE3
+#define MODULE_PROC_FAMILY "K8SSE3 "
 #elif defined CONFIG_MK8
 #define MODULE_PROC_FAMILY "K8 "
+#elif defined CONFIG_MK10
+#define MODULE_PROC_FAMILY "K10 "
+#elif defined CONFIG_MBARCELONA
+#define MODULE_PROC_FAMILY "BARCELONA "
+#elif defined CONFIG_MK14
+#define MODULE_PROC_FAMILY "K14 "
+#elif defined CONFIG_MK16
+#define MODULE_PROC_FAMILY "K16 "
+#elif defined CONFIG_MK15
+#define MODULE_PROC_FAMILY "K15 "
+#elif defined CONFIG_MK15II
+#define MODULE_PROC_FAMILY "K15-II "
+#elif defined CONFIG_MK15III
+#define MODULE_PROC_FAMILY "K15-III "
+#elif defined CONFIG_MK18
+#define MODULE_PROC_FAMILY "K18 "
 #elif defined CONFIG_MELAN
 #define MODULE_PROC_FAMILY "ELAN "
 #elif defined CONFIG_MCRUSOE
